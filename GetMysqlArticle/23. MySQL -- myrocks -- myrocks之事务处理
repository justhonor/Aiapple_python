<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · myrocks · myrocks之事务处理</title>
  <meta name="description" content="前言mysql目前支持的事务引擎有innodb,tokudb。 rocksdb加入mysql阵营后，mysql支持的事务引擎增长至3个。  myrocks目前支持的事务隔离级别有read-committed和repeatable-read。 同innodb一样，myrocks也支持MVCC机制。可以说，myroc...">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2016/11/02/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2016/11">
    <h1>数据库内核月报 － 2016 / 11</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2016/11/01/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2016/11/03/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/01/" target="_blank">
                
                PgSQL · 特性分析 · 金融级同步多副本分级配置方法
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2016/11/02/" target="_blank">
                
                MySQL · myrocks · myrocks之事务处理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/03/" target="_blank">
                
                MySQL · TokuDB · rbtree block allocator
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/04/" target="_blank">
                
                MySQL · 引擎特性 · Column Compression浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/05/" target="_blank">
                
                MySQL · 引擎介绍 · Sphinx源码剖析（一）
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/06/" target="_blank">
                
                PgSQL · 特性分析 · PostgreSQL 9.6 如何把你的机器掏空
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/07/" target="_blank">
                
                PgSQL · 特性分析 · PostgreSQL 9.6 让多核并行起来
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/08/" target="_blank">
                
                MSSQL · 最佳实战 · 巧用COLUMNS_UPDATED获取数据变更
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/09/" target="_blank">
                
                PgSQL · GIS应用 · 物流, 动态路径规划
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/11/10/" target="_blank">
                
                PgSQL · 特性分析· JIT 在数据仓库中的应用价值
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · myrocks · myrocks之事务处理
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <h2>前言</h2>
<p>mysql目前支持的事务引擎有innodb,tokudb。 rocksdb加入mysql阵营后，mysql支持的事务引擎增长至3个。  <br />
myrocks目前支持的事务隔离级别有read-committed和repeatable-read。 同innodb一样，myrocks也支持MVCC机制。<br />
可以说，myrocks提供了很好的事务支持，能够满足的一般业务的事务需求。</p>

<h2>sequence number</h2>
<p>谈到rocksdb事务，就必须提及rocksdb中的sequence number机制。rocksdb中的每一条记录都有一个sequence number,  这个sequence number存储在记录的key中。</p>

<pre><code>InternalKey: | User key (string) | sequence number (7 bytes) | value type (1 byte) |
</code></pre>

<p>对于同样的User key记录，在rocksdb中可能存在多条，但他们的sequence number不同。  <br />
sequence number是实现事务处理的关键，同时也是MVCC的基础。</p>

<h2>snapshot</h2>
<p>snapshot是rocksdb的快照信息，snapshot实际就是对应一个sequence number。 <br />
简单的讲，假设snapshot的sequence number为Sa, 那么对于此snapshot来说，只能看到sequence number&lt;=sa的记录，sequence number&gt;sa的记录是不可见的。</p>

<ul>
  <li>snapshot 结构  <br />
 snapshot 主要包含sequence number和snapshot创建时间,sequence number 取自当前的sequence number。</li>
</ul>

<pre><code>class SnapshotImpl : public Snapshot {
  SequenceNumber number_;  // sequence number
  int64_t unix_time_;      // snapshot创建时间
  ......
};  
</code></pre>

<ul>
  <li>
    <p>snapshot 管理  <br />
 snapshot由全局双向链表管理，根据sequence number排序。snapshot的创建和删除都需要维护双向链表。</p>
  </li>
  <li>
    <p>snapshot与compact  <br />
rocksdb的compact操作与snapshot有紧密联系。以我们熟悉的innodb为例，rocksdb的compact类似于innodb的purge操作， 而snapshot类似于InnoDB的read view。 <br />
innodb做purge操作时会根据已有的read view来判断哪些undo log可以purge，而rocksdb的compact操作会根据已有snapshot信息即全局双向链表来判断哪些记录在compace时可以清理。  <br />
判断的大体原则是，从全局双向链表取出最小的snapshot sequence number Sn。 如果已删除的老记录sequence number &lt;=Sn, 那么这些老记录在compact时可以清理掉。</p>
  </li>
</ul>

<h2>MVCC</h2>
<p>有了snapshot，MVCC实现起来就很顺利了。记录的sequence number天然的提供了记录的多版本信息。<br />
  每次查询用户记录时，并不需要加锁。而是根据当前的sequence number Sn创建一个snapshot, 查询过程中只取小于或等于Sn的最大sequence number的记录。查询结束时释放snapshot。</p>

<p>关键代码段</p>

<pre><code>DBIter::FindNextUserEntryInternal

 if (ikey.sequence &lt;= sequence_) {
   if (skipping &amp;&amp;
      user_comparator_-&gt;Compare(ikey.user_key, saved_key_.GetKey()) &lt;= 0) {
     num_skipped++;  // skip this entry
     PERF_COUNTER_ADD(internal_key_skipped_count, 1);
   } else {
     switch (ikey.type) {
       case kTypeDeletion:
       case kTypeSingleDeletion:
         // Arrange to skip all upcoming entries for this key since
         // they are hidden by this deletion.
         saved_key_.SetKey(
             ikey.user_key,
             !iter_-&gt;IsKeyPinned() || !pin_thru_lifetime_ /* copy */);
         skipping = true;
         num_skipped = 0;
         PERF_COUNTER_ADD(internal_delete_skipped_count, 1);
         break;
       case kTypeValue:
         valid_ = true;
         saved_key_.SetKey(
             ikey.user_key,
             !iter_-&gt;IsKeyPinned() || !pin_thru_lifetime_ /* copy */);
         return;
       case kTypeMerge:
       
       ......
</code></pre>

<h2>隔离级别</h2>
<p>隔离级别也是通过snapshot来实现的。在innodb中，隔离级别为read-committed时，事务中每的个stmt都会建立一个read view, 隔离级别为repeatable-read时,只在事务开启时建立一次read view。 rocksdb同innodb类似，隔离级别为read-committed时，事务中每的个stmt都会建立一个snapshot, 隔离级别为repeatable-read时,只在事务开启时第一个stmt建立一次snapshot。</p>

<p>关键代码片段</p>

<pre><code>rocksdb_commit:

  if (my_core::thd_tx_isolation(thd) &lt;= ISO_READ_COMMITTED)
  {
    // For READ_COMMITTED, we release any existing snapshot so that we will
    // see any changes that occurred since the last statement。
    tx-&gt;release_snapshot();
  }
</code></pre>

<ul>
  <li>隔离级别实现差异  <br />
 在read committed隔离级别下，如果一个大事务要更新1000w行，当它更新了前900w行时，  <br />
 同时另一个事务已经更新了后100w行，那么myrocks会重新获取快照，再次尝试更新，这样<br />
 更新的是新提交的数据，也符合read committed逻辑。具体的讨论可以参考最近的<a href="https://github.com/facebook/mysql-5.6/issues/340">issue#340</a>.<br />
 而之前的处理方式是直接报死锁错误。</li>
</ul>

<pre><code>rocksdb::Status ha_rocksdb::get_for_update(
    Rdb_transaction*             tx,
    rocksdb::ColumnFamilyHandle* column_family,
    const rocksdb::Slice&amp;        key,
    std::string*                 value) const
{
  rocksdb::Status s= tx-&gt;get_for_update(column_family, key, value);

  // If we have a lock conflict and we are running in READ COMMITTTED mode
  // release and reacquire the snapshot and then retry the get_for_update().
  if (s.IsBusy() &amp;&amp; my_core::thd_tx_isolation(ha_thd()) == ISO_READ_COMMITTED)
  {
    tx-&gt;release_snapshot();
    tx-&gt;acquire_snapshot(false);

    s= tx-&gt;get_for_update(column_family, key, value);
  }

  return s;
}
</code></pre>

<p>innodb不会出现上述情况，当第一个大事更新是会持有b树的index lock, 第二个事务会一直等待index lock直至第一个事务提交完成。</p>

<h2>锁</h2>
<p>myrocks目前只支持一种锁类型：排他锁（X锁），并且所有的锁信息都保存在内存中。</p>

<ul>
  <li>锁结构  <br />
 每个锁实际上存储的哪条记录被哪个事务锁住。</li>
</ul>

<pre><code>struct LockInfo {
  TransactionID txn_id;
    
  // Transaction locks are not valid after this time in us 
  uint64_t expiration_time;
  ......
  }
</code></pre>
<p>每个锁实际是key和LockInfo的映射。 锁信息都保存在map中</p>

<pre><code>struct LockMapStripe {
  std::unordered_map&lt;std::string, LockInfo&gt; keys;
  ......
}
</code></pre>

<p>为了减少全局锁信息访问的冲突， rocksdb将锁信息进行按key hash分区，</p>

<pre><code>struct LockMap {
    std::vector&lt;LockMapStripe*&gt; lock_map_stripes_;
}
</code></pre>
<p>同时每个column family 存储一个这样的LockMap。</p>

<pre><code>using LockMaps = std::unordered_map&lt;uint32_t, std::shared_ptr&lt;LockMap&gt;&gt;;
LockMaps lock_maps_; 
</code></pre>

<p>锁相关参数：   <br />
max_num_locks：事务锁个数限制  <br />
expiration：事务过期时间</p>

<p>通过设置以上两个参数，来控制事务锁占用过多的内存。</p>

<ul>
  <li>死锁检测</li>
</ul>

<p>rocksdb内部实现了简单的死锁检测机制，每次加锁发生等待时都会向下面的map中插入一条等待信息，表示一个事务id等待另一个事务id。<br />
同时会检查wait_txn_map_是否存在等待环路，存在环路则发生死锁。</p>

<pre><code>std::unordered_map&lt;TransactionID, TransactionID&gt; wait_txn_map_;
</code></pre>

<p>死锁检测关键代码片段</p>

<pre><code>TransactionLockMgr::IncrementWaiters:

	for (int i = 0; i &lt; txn-&gt;GetDeadlockDetectDepth(); i++) {
	  if (next == id) {
	    DecrementWaitersImpl(txn, wait_id);
	    return true;
	  } else if (wait_txn_map_.count(next) == 0) {
	    return false;
	  } else {
	    next = wait_txn_map_[next];
	  }
	}

</code></pre>

<p>死锁检测相关参数    <br />
deadlock_detect：是否开启死锁检测  <br />
deadlock_detect_depth：死锁检查深度，默认50</p>

<ul>
  <li>gap lock</li>
</ul>

<p>innodb中是存在gap lock的，主要是为了实现repeatable read和唯一性检查的。<br />
 而在rocksdb中，不支持gap lock(rocksdb insert是也会多对唯一键加锁，以防止重复插入，<br />
 严格的来讲也算是gap lock)。</p>

<p>那么在rocksdb一些需要gap lock的地方，目前是报错和打印日志来处理的。</p>

<p>相关参数  <br />
 gap_lock_write_log： 只打印日志，不返回错误  <br />
 gap_lock_raise_error： 打印日志并且返回错误</p>

<ul>
  <li>锁示例</li>
</ul>

<p>直接看例子</p>

<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/5dffcea110862136087f28f0ed9eecd4.png" alt="screenshot.png" /></p>

<h2>binlog XA &amp; 2pc</h2>

<p>myrocks最近也支持了binlog xa。<br />
  在开启binlog的情况下，myrocks提交时，会经历两阶段提交阶段。<br />
  prepare阶段，根据server层生成的xid(由MySQLXid+server_id+qurey_id组成），在rockdb内部执行2pc操作，生成Prepare(xid),EndPrepare()记录。<br />
  commit阶段，根据事务成还是失败，生成Commit(xid)或Rollback(xid)记录。</p>

<p>rocksdb 2pc参考<a href="https://github.com/facebook/rocksdb/wiki/Two-Phase-Commit-Implementation">这里</a></p>

<h2>总结</h2>
<p>myrocks在事务处理方面还有些不完善的地方，比如锁类型只有单一的X锁，不支持gap lock，纯内存锁占用内存等。 myrocks社区正在持续改进中，一起期待。</p>


    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
