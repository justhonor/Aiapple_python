<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · 社区动态 · MySQL5.6.26 Release Note解读</title>
  <meta name="description" content="最近上游发布了MySQL 5.6.26版本，从Release Note来看，MySQL 5.6版本已经相当成熟，fix的bug数越来越少了。本文主要分析releae note上fix的相关bug，去除performance scheama、mac及windows平台、企业版、package相关内容。从本期开始，我...">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2015/08/03/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2015/08">
    <h1>数据库内核月报 － 2015 / 08</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2015/08/02/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2015/08/04/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/01/" target="_blank">
                
                MySQL · 社区动态 · InnoDB Page Compression
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/02/" target="_blank">
                
                PgSQL · 答疑解惑 · RDS中的PostgreSQL备库延迟原因分析
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2015/08/03/" target="_blank">
                
                MySQL · 社区动态 · MySQL5.6.26 Release Note解读
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/04/" target="_blank">
                
                PgSQL · 捉虫动态 · 执行大SQL语句提示无效的内存申请大小
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/05/" target="_blank">
                
                MySQL · 社区动态 · MariaDB InnoDB表空间碎片整理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/06/" target="_blank">
                
                PgSQL · 答疑解惑 · 归档进程cp命令的core文件追查
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/07/" target="_blank">
                
                MySQL · 答疑解惑 · open file limits
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/08/" target="_blank">
                
                MySQL · TokuDB · 疯狂的 filenum++
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/09/" target="_blank">
                
                MySQL · 功能分析 · 5.6 并行复制实现分析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/08/10/" target="_blank">
                
                MySQL · 功能分析 · MySQL表定义缓存
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · 社区动态 · MySQL5.6.26 Release Note解读
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <p>最近上游发布了MySQL 5.6.26版本，从Release Note来看，MySQL 5.6版本已经相当成熟，fix的bug数越来越少了。本文主要分析releae note上fix的相关bug，去除performance scheama、mac及windows平台、企业版、package相关内容。从本期开始，我们会在新版本发布时，在当月的月报上为大家做详细的版本Release Note分析。</p>

<h2>InnoDB storage engine</h2>

<p><strong>问题描述</strong><br />
在类Unix平台上，当innodb_flush_method设置为O_DIRECT时，函数<code>os_file_create_simple_no_error_handling_func</code>没有使用O_DIRECT方式打开数据文件。例如在函数<code>fil_node_open_file</code>中，可能先以函数<code>os_file_create_simple_no_error_handling_func</code>打开文件，确定文件的大小，然后关闭文件；再以<code>os_file_create</code>打开数据文件，前者使用Buffered IO，后者使用DIRECT IO。这种混合使用可能引发性能问题。</p>

<p>根据man手册建议：</p>

<blockquote>
  <p>Applications should avoid mixing O_DIRECT and normal I/O to the same file, and especially to overlapping byte regions in handles the coherency issues in this situation, overall I/O the  same file.   Even  when  the filesystem correctly throughput  is likely to be slower than using either mode of files with direct I/O to the same files.”  alone.  Likewise, applications should avoid mixing mmap(2)</p>
</blockquote>

<p>(Bug #21113036, Bug #76627)</p>

<p><strong>解决</strong><br />
在函数<code>os_file_create_simple_no_error_handling_func</code> 中禁止OS Cache（函数<code>os_file_set_nocache</code>）</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/b4daac21f52ced96c11632b83445111c0acede56">b4daac21f52ced96c11632b83445111c0acede56</a></p>

<p><strong>问题描述</strong><br />
在将一个脏页从非压缩page拷贝到压缩页后，在写page到文件时(<code>buf_flush_write_block_low</code>)，在设置压缩页的修改LSN之前先调用了函数<code>page_zip_verify_checksum</code>，由于此时压缩页上的LSN为0，而计算出来的checksum也可能为0，此时<code>page_zip_verify_checksum</code>认为要尝试写入一个空page，返回false，导致断言失败(Bug #21086723)。</p>

<p><strong>解决</strong><br />
先设置LSN，再调用<code>page_zip_verify_checksum</code>。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/5b6041b2c7cbee8a1d917631d3a051122b8c4f8d">5b6041b2c7cbee8a1d917631d3a051122b8c4f8d</a></p>

<p><strong>问题描述</strong><br />
当以如下序列执行时，实例会crash:</p>

<pre><code class="language-sql">create database `b`;
use b;
create table `#mysql50#q.q` select 1;
drop database `b`;
</code></pre>

<p>在创建表时，发现非法的表名，表名被reset成一个空字符串，传递到引擎层就是”dbname/”， 而引擎层的数据词典定义中，是通过“dbname/tablename”这样的字符串来定位的，这就违反了数据词典的约定。 随后如果执行drop database,  会去遍历以db名作为前缀的数据词典项，触发crash。PS：即使重启实例，drop database，也无法执行清理操作，用户线程会不停的在drop db的逻辑里loop(Bug #19929435)。</p>

<p><strong>解决</strong><br />
在引擎层拒绝创建空的表名。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/8fd710e06024a890e08e35009da541194ca0e5a4">8fd710e06024a890e08e35009da541194ca0e5a4</a></p>

<p><strong>问题描述</strong><br />
在函数<code>innobase_get_foreign_key_info</code>中，需要根据子表中存储的父表表名去打开父表，但子表上是根据系统字符集system_charset_info存储的，而innodb是使用my_charset_filename存储表名和库名，因此如果包含父表包含特殊字符，就会造成无法打开父表，导致报错。(Bug #21094069)</p>

<p><strong>解决</strong><br />
将系统字符集的表名和库名转换成my_charset_filename格式（tablename_to_filename）。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/1fae0d42c352908fed03e29db2b391a0d2969269">1fae0d42c352908fed03e29db2b391a0d2969269</a></p>

<p><strong>问题描述</strong><br />
* 当一个IO后台线程为了做ibuf merge，需要读入对应数据文件的bitmap page时(check 函数<code>buf_page_io_complete</code> –&gt; <code>ibuf_merge_or_delete_for_page</code>),读取方式为同步读, <code>space-&gt;n_pending_ops</code>递增；<br />
* 另外一个用户线程准备删除对应的tablespace，因此将<code>space-&gt;stop_new_ops</code>设置为true，并等待直到<code>space-&gt;n_pending_ops</code>为0（<code>fil_check_pending_operations</code>）；<br />
* 后台线程尝试读入ibuf bitmap page，但由于在<code>fil_io</code>函数中，如果发现<code>space-&gt;stop_new_ops</code>被设置，所有的读操作都被拒绝，直接返回DB_TABLESPACE_DELETED错误，但在函数<code>ibuf_merge_or_delete_for_page</code>中总是认为ibuf bitmap page被成功读入内存，后面直接引用这个page（实际上是空指针），可能会导致实例crash。</p>

<p><strong>解决</strong><br />
在进行fil_io时，如果表空间正在被删除(<code>space-&gt;stop_new_ops</code>被设置为true），不允许异步读操作，但允许写操作和同步读操作。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/3ba4563a757e07c3052c780b63e2626c78ca5c47">3ba4563a757e07c3052c780b63e2626c78ca5c47</a></p>

<p><strong>问题描述</strong><br />
当表上的索引存在前缀索引时(prefix index)，对表进行export，再import tablespace可能会失败，并报Schema mismatch错误，错误码为ER_TABLE_SCHEMA_MISMATCH。test case见bug#76877 (Bug #20977779, Bug #76877)。原因是cfg文件和表的索引定义相匹配时逻辑错误，例如如下表：</p>

<pre><code class="language-sql">CREATE TABLE t1 (c1 VARCHAR(128), PRIMARY KEY (c1(16))) ENGINE=InnoDB;
</code></pre>

<p>在索引对象中定义了4个列：(c1, prefix_len=16), (DB_TRX_ID), (DB_ROLL_PTR)，(c1, prefix_len=0)。<br />
cfg和表索引对象相比较时，其实两者是一样的，但cfg在取列时，如果存在相同列名的，总是取第一个，如上例，在比较第四个列的schema是否一致时，取的实际上是第一个，从而产生报错。</p>

<p>参考函数：<code>row_import::match_index_columns</code> ((Bug #20977779, Bug #76877))。</p>

<p><strong>解决</strong><br />
一个列一个列的依次校验。</p>

<p><strong>补丁：</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/db23392bac27ad3e84319229ee3db9921b734abd">db23392bac27ad3e84319229ee3db9921b734abd</a></p>

<p><strong>问题描述</strong><br />
考虑如下场景：</p>

<ol>
  <li>purge线程读取一个undo ，解析出对应的记录 (<code>row_purge</code> —&gt; <code>row_purge_parse_undo_rec</code>)；</li>
  <li>先 purge 二级索引(<code>row_purge_remove_sec_if_poss</code>)，再purge聚集索引(<code>row_purge_remove_clust_if_poss</code>)；</li>
  <li>当 purge 二级索引页时，需要检查二级索引记录是否可以被物理purge掉(<code>row_purge_remove_sec_if_poss_leaf</code>)。</li>
</ol>

<p>参考函数：<code>row_purge_poss_sec</code></p>

<pre><code class="language-C">can_delete = !row_purge_reposition_pcur(BTR_SEARCH_LEAF, node, &amp;mtr)
             || !row_vers_old_has_index_entry(TRUE,
                                              btr_pcur_get_rec(&amp;node-&gt;pcur),
                                              &amp;mtr, index, entry,
                                              node-&gt;roll_ptr, node-&gt;trx_id);
</code></pre>

<p><code>row_purge_reposition_pcur</code>定位到聚集索引上，<code>node-&gt;found_clust</code>设置为true，定位到clust index上的cursor存储在node-&gt;pour上。</p>

<ul>
  <li>然后再检查二级索引记录是否被标记删除了，(<code>row_purge_remove_sec_if_poss_leaf</code> —&gt; <code>red_get_deleted_flag</code>)，如果没有被标记删除，则报warning。</li>
</ul>

<p>但是步骤3中，即时二级索引没有被标记删除，在函数<code>row_purge_poss_sec</code>也返回了true，这是因为重新定位cursor的逻辑错误。</p>

<p>函数<code>row_purge_reposition_pcur</code>:</p>

<pre><code class="language-C">if (node-&gt;found_clust) {
          ibool   found;
          found = btr_pcur_restore_position(mode, &amp;node-&gt;pcur, mtr);
          return(found);
} else {
           node-&gt;found_clust = row_search_on_row_ref(
           &amp;node-&gt;pcur, mode, node-&gt;table, node-&gt;ref, mtr);
           if (node-&gt;found_clust) {
               btr_pcur_store_position(&amp;node-&gt;pcur, mtr);
           }
}

return(node-&gt;found_clust);
</code></pre>

<p>考虑如下序列：</p>

<ol>
  <li>purge Index1时，根据node-&gt;ref找到对应的聚集索引记录，node-&gt;found_clust设置为true，当前cursor存到node-&gt;pour中；</li>
  <li>其他用户线程操作了聚集索引页，导致在purge  index2时，restore position可能失败，因此返回false；</li>
  <li>随后purge index2，发现node-&gt;found_clust为true，依旧用上次restore的position来作restore，依然失败；在函数<code>row_purge_reposition_pcur</code>返回false就认为对应的聚集索引不存在，然后就去尝试删除二级索引记录；但注意这次想purge的二级索引记录可能是一个新鲜插入的记录，并没有被delete mark，我们实际上需要根据node-&gt;ref重新定位。</li>
</ol>

<p><strong>解决</strong><br />
在函数<code>row_purge_reposition_pcur</code>中，若是restore cursor失败，需要重置node-&gt;found_clust为false (Bug #19138298, Bug #70214, Bug #21126772, Bug #21065746)</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/982a157c71667040838def7a00d951ffc55eccbc">982a157c71667040838def7a00d951ffc55eccbc</a><br />
<a href="https://github.com/mysql/mysql-server/commit/4b8304a9a41c8382d18e084608c33e5c27bec311">4b8304a9a41c8382d18e084608c33e5c27bec311</a><br />
<a href="https://github.com/mysql/mysql-server/commit/e59914034ab695035c3fe48f046a96bb98d53044">e59914034ab695035c3fe48f046a96bb98d53044</a><br />
<a href="https://github.com/mysql/mysql-server/commit/92b4683d59c066f099be1d283c7d61b00caeedb2">92b4683d59c066f099be1d283c7d61b00caeedb2</a></p>

<h2>InnoDB 全文索引</h2>

<p><strong>问题描述</strong><br />
尝试为表上rebuild 全文索引，但表上已经有损坏的索引时，会触发assert。(Bug #20637494)</p>

<p><strong>解决</strong><br />
抛出错误，提示用户先删掉损坏的索引。返回错误码为ER_INNODB_INDEX_CORRUPT。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/4395ad1755c3ed86c4210f76001a76eb0a69b553">4395ad1755c3ed86c4210f76001a76eb0a69b553</a><br />
<a href="https://github.com/mysql/mysql-server/commit/3bdb4573e9b25357eea2421647263216c36367cb">3bdb4573e9b25357eea2421647263216c36367cb</a></p>

<p><strong>问题描述</strong><br />
构建full-text的表上存在隐藏的FTS_DOC_ID和唯一索引FTS_DOC_ID_INDEX（FTS_DOC_ID），当删除全文索引时，对应的隐藏列并没有删除，但在当前的逻辑中，如果存在FTS_DOC_ID，则不允许ONLINE DDL(Bug #20590013, Bug #76012)。</p>

<p><strong>解决</strong><br />
当表上只有FTS_DOC_ID_INDEX和FTS_DOC_ID 但没有定义全文索引时，允许ONLINE DDL。这些隐藏列直到全表rebuild时才被删除。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/5610e5354a8be6609b2fc2a37902961be26af3cf">5610e5354a8be6609b2fc2a37902961be26af3cf</a></p>

<h2>InnoDB API/Memcached</h2>

<p><strong>问题描述</strong><br />
<code>ib_cursor_moveto</code> 函数没有判断构建的tuple的列个数是否小于索引列个数，而是直接用索引列的个数来做遍历，可能导致段错误(Bug #21121197, Bug #77083)。</p>

<p><strong>解决</strong><br />
加上对应的判断。</p>

<p><strong>补丁：</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/d511b503353c1588e90907f59b947e31796c1fc1">d511b503353c1588e90907f59b947e31796c1fc1</a></p>

<p><strong>问题描述</strong><br />
<code>ib_table_truncate</code>函数中，当truncate失败时，没有正确的释放事务对象，可能导致shutdown hang住。</p>

<p><strong>解决:</strong><br />
总是释放事务对象。</p>

<p><strong>补丁:</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/aeef8dc2c7af8be4f8ac91be6963e5252e8a9d3f">aeef8dc2c7af8be4f8ac91be6963e5252e8a9d3f</a><br />
<a href="https://github.com/mysql/mysql-server/commit/e0e1f02d97f54252c1e6ea386dc029560c9f7d08">e0e1f02d97f54252c1e6ea386dc029560c9f7d08</a></p>

<p><strong>问题描述</strong><br />
<code>ib_open_table_by_id</code>函数中，已经加了<code>dict_sys-&gt;mutex</code>锁，但该函数中调用<code>dict_table_open_on_id</code>传递的第二个参数为FALSE，认为没有持有mutex，属于基本的逻辑错误(Bug #21121084, Bug #77100)。</p>

<p><strong>解决</strong><br />
调整传参。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/a2353c5d7ff6430e853de435d007ac64d91fd17d">a2353c5d7ff6430e853de435d007ac64d91fd17d</a></p>

<p>上面几个bug看起来都是非常“低级”的代码缺陷，这也侧面证明了InnoDB API接口在推出后社区用的人实在太少了，这三个Bug都是facebook的工程师提出的，很好奇他们会利用InnoDB API做些什么。</p>

<p><strong>问题描述</strong><br />
InnoDB memcached plugin在处理unsigned NOT NULL类型时没有正确处理，导致返回的数据错误。</p>

<ul>
  <li>对于unsigned类型，对应的IB_COL_UNSIGNED = 2</li>
  <li>对于NOT NULL类型，对应的IB_COL_NOT_NULL = 1</li>
</ul>

<p>但是代码里很多地方都使用类似<code>m_col-&gt;attr == IB_COL_UNSIGNED</code>，导致大量的逻辑错误(Bug #20535517, Bug #75864)。</p>

<p><strong>解决</strong><br />
修改成<code>m_col-&gt;attr &amp; IB_COL_UNSIGNED</code>。</p>

<p><strong>补丁：</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/6ff8d5d2940b9c9079e07641b2beb12e8dd84b38">6ff8d5d2940b9c9079e07641b2beb12e8dd84b38</a></p>

<h2>复制</h2>

<p><strong>问题描述</strong><br />
当使用多线程复制时，执行STOP SLAVE需要等待所有的worker线程完成其各自的工作队列中的事务。如果Pending的事务很多，可能要等待很长时间才能完成STOP SLAVE，另外在STOP SLAVE的过程中，是无法SHOW SLAVE STATUS的，一种比较常见的场景就是大量的监控程序SQL堵塞堆积(Bug #75525, Bug #20369401)。</p>

<p><strong>解决</strong></p>

<p>解决方案是先找到任意worker线程中最新的commit的事务，确定一个上限位点，所有的worker线程执行到这个位置停止，剩下的事务暂时不执行。具体的：</p>

<ol>
  <li>执行STOP SLAVE，coordinator线程首先将所有worker线程的状态设置成STOP（<code>slave_stop_workers(rli, &amp;mts_inited)</code>），并更新<code>rli-&gt;max_updated_index</code>为最新的已经执行（或正在执行）的事务的group index(<code>set_max_updated_index_on_stop</code>)；</li>
  <li>所有worker的工作队列中索引序号小于等于 <code>rli-&gt;max_updated_index</code> 的事务都需要被执行完，否则worker状态设置为STOP_ACCEPTED，表示已经完成了max_updated_index 之前的事务，可以退出(<code>set_max_updated_index_on_stop</code>)；</li>
  <li>coordinator线程等待所有worker线程退出，并做一次checkpoint(<code>slave_stop_workers</code> –&gt; <code>mts_checkpoint_routine</code>)。</li>
</ol>

<p>但是上述方案并不能解决正在执行的大事务过慢的问题。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/37f2e969bd36a7455e81ea2350685707bc859866">37f2e969bd36a7455e81ea2350685707bc859866</a></p>

<p><strong>问题描述</strong><br />
 MySQL使用InnoDB + binlog做XA的方式来进行crash recovery，但在之前的版本中如果写Binlog到磁盘发生了错误，group commit的逻辑并没有感知到这个错误，而是继续在引擎层提交事务，备库没有接收到对应的Binlog，导致主备数据不一致 (Bug #76795, Bug #20938915)。</p>

<p><strong>解决</strong><br />
从MySQL 5.6.22版本开始，引入了一个新参数binlog_error_action (5.6.20及21版本叫做binlogging_impossible_mode)，若设置为ABORT_SERVER，则在发生binlog写入错误时直接让实例退出，避免引发更大的错误；若设置为IGNORE_ERROR，则忽略本次写入失败，同时禁止Binlog记录，需要重启才能让binlog再次开启。<br />
为了主备数据的强一致性，通常应该将binlog_error_action设置为ABORT_SERVER，这样在打开文件、rotate新文件、从IO Cache写binlog到文件出现磁盘错误时，都会退出实例。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/3b6b4bf8c5d1bfada58678acebafdf6f813c2dfe">3b6b4bf8c5d1bfada58678acebafdf6f813c2dfe</a></p>

<p><strong>问题描述</strong><br />
relay_log_recovery参数打开时，备库在重启时就可以根据SQL线程执行到的位置重新拉binlog，这可以有效处理备库发生机器宕机导致relay log文件损坏的情况，无需人工去change master，在之前版本中，如果使用了多线程复制，是无法开启该特性的，在启动实例时会报如下错误：</p>

<blockquote>
  <p>relay-log-recovery cannot be executed when the slave was stopped with an error or killed in MTS mode</p>
</blockquote>

<p>实际上，如果开启了GTID，就无需关心各个worker线程之间的gap，通过备库的GTID集合充拉relay log即可(Bug #73397, Bug #19316063)。</p>

<p><strong>解决</strong><br />
在重启recovery时检查是否开启了GTID。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/fce558959bd0e5af1ae6aac3d8573db00c271dfd">fce558959bd0e5af1ae6aac3d8573db00c271dfd</a></p>

<p><strong>问题描述</strong><br />
当两台备库错误的配置了相同的server_uuid，并指向同一个主库时，备库的IO线程会被频繁的断开并尝试重连。而在备库来看，并没有足够的信息提示产生重连的原因。</p>

<p><strong>解决</strong><br />
这种场景下，主库会生产一个错误信息传递到备库，当备库接受到这样的错误信息时不再尝试重连。(Bug #72581, Bug #18731252)</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/751a3da76dfd66b92395f90f11fce6bd890c9db5">751a3da76dfd66b92395f90f11fce6bd890c9db5</a></p>

<h2>分区表</h2>

<p><strong>问题描述</strong><br />
bug被隐藏，无test case，对应release note:</p>

<blockquote>
  <p>Partitioning: In certain cases, ALTER TABLE … REBUILD PARTITION was not handled correctly when executed on a locked table. (Bug #75677, Bug #20437706)</p>
</blockquote>

<p><strong>解决</strong><br />
参考commit log.</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/6b0e6683416dc6f8274a460bd2512e7b037ec75f">6b0e6683416dc6f8274a460bd2512e7b037ec75f</a></p>

<h2>优化器</h2>
<p>小编对优化器模块代码理解不深，感兴趣的同学可以自行阅读对应的bug report及commit log，手动尝试复现bug。</p>

<p><strong>问题描述</strong></p>

<blockquote>
  <p>While calculating the cost for doing semjoin_dupsweedout strategy inner_fnout is calculated wrongly when max_outer_fanout becomes 0. This causes mysql server to exit later (Bug #21184091)</p>
</blockquote>

<p><strong>解决</strong></p>

<blockquote>
  <p>Calculate the inner_fanout only when max_outer_fanout is &gt; 0. Else there is no need to recalculate inner_fanout w.r.t max_outer_fanout.</p>
</blockquote>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/bfba2338902a81927d116c30eaa1245eaea025c8">bfba2338902a81927d116c30eaa1245eaea025c8</a></p>

<p><strong>问题描述</strong></p>

<blockquote>
  <p>GROUP BY or ORDER BY on a CHAR(0) NOT NULL column could lead to a server exit. (Bug #19660891)<br />
ASSERTION `PARAM.SORT_LENGTH != 0’ FAILED IN SQL/FILESORT.CC:361</p>
</blockquote>

<p><strong>解决</strong><br />
参考commit log.</p>

<p><strong>补丁：</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/60c6920509516a1e05b855799479a59c27803191">60c6920509516a1e05b855799479a59c27803191</a><br />
<a href="https://github.com/mysql/mysql-server/commit/b62c5daa646434290c9b2d1c9b162487cb8edf04">b62c5daa646434290c9b2d1c9b162487cb8edf04</a></p>

<p><strong>问题描述</strong></p>

<blockquote>
  <p>When choosing join order, the optimizer could incorrectly calculate the cost of a table scan and choose a table scan over a more efficient eq_ref join. (Bug #71584, Bug #18194196)</p>
</blockquote>

<p><strong>解决</strong><br />
参考commit log.</p>

<p><strong>补丁：</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/7a36c155ea3f484799c213a5be5a3deb464251dc">7a36c155ea3f484799c213a5be5a3deb464251dc</a></p>

<h2>其他</h2>

<p><strong>问题描述</strong><br />
MySQL String库下的字符串处理问题，在<code>cs_values</code>函数中，对字符串长度的处理存在缺陷，可能导致内存损坏(Bug #20359808)。</p>

<p><strong>解决</strong><br />
调整长度判断。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/1cdd3b832ae32d3c236869954f0c7a8a851ed94a">1cdd3b832ae32d3c236869954f0c7a8a851ed94a</a></p>

<p><strong>问题描述</strong><br />
当会话断开或者执行类似change user时，session status会merge到全局status中（<code>add_to_status(&amp;global_status_var, &amp;status_var)</code>），但没有立刻对thd的status_var做reset，这时候另外一个session去查询global status时，会重复把这些session的status值加到全局。</p>

<p><strong>解决</strong><br />
在<code>THD::change_user</code>、<code>THD::release_resources</code>函数中累加到全局status后，重置session的status。</p>

<p><strong>补丁</strong><br />
<a href="https://github.com/mysql/mysql-server/commit/c8243dd36047debb76134344d761e48f0cedf78e">c8243dd36047debb76134344d761e48f0cedf78e</a></p>


    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
