<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · 源码分析 · Query Cache并发处理</title>
  <meta name="description" content="Query cache 的并发处理">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2016/08/09/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2016/08">
    <h1>数据库内核月报 － 2016 / 08</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2016/08/08/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2016/08/10/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/01/" target="_blank">
                
                MySQL · 特性分析 ·MySQL 5.7新特性系列四
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/02/" target="_blank">
                
                PgSQL · PostgreSQL 逻辑流复制技术的秘密
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/03/" target="_blank">
                
                MySQL · 特性分析 · MyRocks简介
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/04/" target="_blank">
                
                GPDB · 特性分析· Greenplum 备份架构
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/05/" target="_blank">
                
                SQLServer · 最佳实践 · RDS for SQLServer 2012权限限制提升与改善
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/06/" target="_blank">
                
                TokuDB · 引擎特性 · REPLACE 语句优化
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/07/" target="_blank">
                
                MySQL · 专家投稿 · InnoDB物理行中null值的存储的推断与验证
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/08/" target="_blank">
                
                PgSQL · 实战经验 · 旋转门压缩算法在PostgreSQL中的实现
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2016/08/09/" target="_blank">
                
                MySQL · 源码分析 · Query Cache并发处理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/08/10/" target="_blank">
                
                PgSQL · 源码分析· pg_dump分析
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · 源码分析 · Query Cache并发处理
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <h2>Query cache 的并发处理</h2>

<p>上期介绍了Query cache的一个基本工作原理，请参考<a href="http://mysql.taobao.org/monthly/2016/07/09/">MySQL · 源码分析 · Query Cache内部剖析</a>。本期将对Query cache的并发处理过程进行一个剖析。</p>

<p>当前Query cache是所有session共享的，也就是说同一条SELECT语句 + database + flag（包含影响执行结果的所有环境变量）构成的Key如果已经存储在Query cache中了，任何session都可以从Query cache中获取想要的结果集。所有session共享Query cache，那如何处理并发呢？当前Query cache只支持查询，插入，删除操作，不支持更新。下面我们将对这三种操作的并发原理进行分析。</p>

<p>在对三种操作进行分析之前，我们先来看看Query cache 并发处理的方式。Query cache的并发处理，同样是利用锁。对于Query cache对象自身的所有操作使用一把mutex锁来进行并发控制。Query_cache在其初始化，即调用Query_cache::init的时候，会初始化如下锁变量：</p>

<pre><code>void Query_cache::init()
{
  mysql_mutex_init(key_structure_guard_mutex,
            &amp;structure_guard_mutex, MY_MUTEX_INIT_FAST);
  mysql_cond_init(key_COND_cache_status_changed,
            &amp;COND_cache_status_changed, NULL);
    m_cache_lock_status= Query_cache::UNLOCKED;
  ……
}
</code></pre>

<p><strong>说明</strong>：</p>

<p><code>key_structure_guard_mutex</code>以及<code>key_COND_cache_status_changed</code>这两个变量是用来处理Query cache与PSI(Performance schema instrumentation interface)相关的并发控制，这里我们不对其进行介绍，如果有兴趣可以参考PSI的相关介绍。</p>

<p>另外一个mutex变量<code>structure_guard_mutex</code>用来控制Query cache的并发访问，同时它也用来配合<strong>mysql_cond_t</strong> <code>key_COND_cache_status_changed</code>来控制对Query cache锁的超时处理。我们会在稍后介绍加锁处理的地方进行具体描述。</p>

<p><code>m_cache_lock_status</code>控制当前Query cache所处的状态。该变量有3个值：</p>

<table>
  <tbody>
    <tr>
      <td><strong>UNLOCKED</strong></td>
      <td>表明当前Query cache处于未被使用状态。该状态下我们使用mutex来控制Query cache的并发访问。</td>
    </tr>
    <tr>
      <td><strong>LOCKED_NO_WAIT</strong></td>
      <td>表明当前的Query cache正处于Flush或者是正在关闭使用Query cache的状态。</td>
    </tr>
    <tr>
      <td><strong>LOCKED</strong></td>
      <td>表明当前的Query cache正在被使用。此时我们利用mysql_cond_t来进行加锁，同时支持锁定超时。</td>
    </tr>
  </tbody>
</table>

<p>Query cache中一个重要的控制并发的函数是<code>Query_cache::try_lock</code>，也就是加锁过程，算法实现如下：</p>

<pre><code>bool Query_cache::try_lock(bool use_timeout)
{
  mysql_mutex_lock(&amp;structure_guard_mutex); //首先试图获取mutex
  while(1)
  {
    if (m_cache_lock_status == Query_cache::UNLOCKED)
    {
      m_cache_lock_status= Query_cache::LOCKED; //如果Query cache未被锁定，那么我们修改其状态为锁定状态。利用mutex进行加锁。
      break;
    }
    else if (m_cache_lock_status == Query_cache::LOCKED_NO_WAIT)
    {
      interrupt= TRUE; //这里表示Query cache正在被Flush或者处于关闭状态，没有必要再加锁继续进行操作。遇到这种状态，需要加锁的操作将直接返回。
      break;
    }
    else
    {
      if (use_timeout) //这个参数是控制是否需要超时处理。
      {
        set_timespec_nsec(waittime,(ulong)(50000000L));  // 50微秒超时
        int res= mysql_cond_timedwait(&amp;COND_cache_status_changed,
                        &amp;structure_guard_mutex, &amp;waittime);
      }
      else
      {
        mysql_cond_wait(&amp;COND_cache_status_changed, 
                        &amp;structure_guard_mutex);
      }
    }
  }
}
</code></pre>

<p>Query cache的记录查询，插入都需要先使用<code>Query_cache::try_lock</code>加锁。使用<code>Query_cache::try_lock</code>加锁的主要原因是可以检查Query cache所处的锁定状态，如果Query cache正在FLUSH或者关闭，记录查询或者插入都将没有意义，因此检查到锁定状态为<strong>Query_cache::LOCKED_NO_WAIT</strong>就可以直接返回了。</p>

<p>对于删除Query cache中的记录，操作前进行的锁定是<code>Query_cache::lock</code>。该函数与<code>Query_cache::try_lock</code>的唯一区别就是不再检查<strong>Query_cache::LOCKED_NO_WAIT</strong>状态，一直等待直到获取Query cache锁。</p>

<h3>Query cache的记录查询</h3>

<p>基本流程如下：(下面的函数定义写的都是伪代码，如需了解详情请参考MySQL源码)</p>

<pre><code>Query_cache::send_result_to_client(…)
{
  If (!SELECT语句)
    return;
  if (try_lock()) 
    return;
  构造Query cache中Key值（Key值包含了query + database + flag（包含影响执行结果的所有环境变量））;
  query_block= 通过Key值查找Query cache中的Query_cache_block；

  if (!query_block) //未找到任何记录
    return；

  if (query_block-&gt;result_type == Query_cache_block::RESULT) // 这里的条件是用来判断与该条Query相关的结果集是否已经被完全的写入了Query cache中。如果结果集没有全部写入，显然我们也不能返回结果集。
  {
    RD_lock (query_block); //这个Query_cache_block的块锁应该没什么用处，因为所有操作都需要Query cache的全局mutex。
    if (表的权限检查成功)
      返回结果集；
    RD_unlock(query_block); //释放Query_cache_block的Read锁。
  }

  unlock(); // 释放Query cache的全局mutex。
}

</code></pre>

<h3>Query cache数据的插入</h3>

<p>目前插入流程如下：</p>

<pre><code>Query_cache::store_query();
// 该函数首先生成Query_cache_block的header部分。
// header包含哪几部分请参考往期月报, MySQL · 源码分析 · Query Cache内部剖析。
// 生成的header会挂到thd-&gt;query_cacne_tld.first_query_block。
// thd-&gt;query_cacne_tld.first_query_block用来在接下来的Query_cache::insert()过程中判断是否当前session需要缓存结果集。

注意：Query cache目前实现中只有生成Query_cache_block header的session才可以为该block添加数据，
     其他session如果输入同样的执行语句，在调用Query_cache::store_query()会发现已经有session生成了header，就不会再重复生成header了。
     这样实现的目的是让一个session负责写入所有的结果集，可以避免其他session进行干扰。

Query_cache::insert(…) //负责将结果集缓存到Query_cache_block的数据部分。
{
  if (query_block= thd-&gt;query_cache_tls-&gt;first_query_block) //检查当前session是否需要缓存结果集
  {
    if (try_lock()) 
      return;
    RW_lock(query_block-&gt;query()-&gt;lock); //这里的写锁同样没有作用了，因为Query cache的mutex会对并发进行控制。
      append_result_data(); //将结果集缓存到Query_cache_block中。
    RW_unlock(query_block-&gt;query()-&gt;lock); //释放排他锁。
    unlock(); // 释放Query cache的全局排他锁。
  }
}
</code></pre>

<h3>Query cache的删除：</h3>

<pre><code>Query_cache::invalidate_table(…)
{
  lock(); 
  // 这里使用lock而非try_lock，是因为我们需要强制失效所有与table相关的Query_cache_block。
  // 而try_lock会在Query cache的状态为Query_cache::LOCKED_NO_WAIT的时候直接返回。
  invalidate_table_internal(); //失效所有与指定表相关的Query cache。
  unlock(); //释放全局mutex。
}
</code></pre>

<p>对于Query cache的失效部分，目前的处理方式非常暴力，任何对表数据的修改，包括UPDATE/INSERT/DELETE操作，都会将该表相关的所有Query cache记录实效掉，这种实效方式影响非常大。建议增加对于WHERE，HAVING等过滤条件的判断，如果Query cache中的记录涉及的结果集与当前UPDATE/INSERT/DELETE所涉及的数据没有交集，我们完全没有必要实效掉这样的记录。比如：</p>

<pre><code>SELECT * FROM t WHERE t.a &gt; 10;
</code></pre>

<p>我们对于这样一条SELECT语句进行结果集的缓存。对于如下的INSERT/UPDATE/DELETE 语句来说，我们完全没有必要去失效与这条SELECT语句相关的结果集缓存，因为下面这几条语句操作的数据集和SELECT的结果集没有发生任何交集。</p>

<pre><code>INSERT INTO t (a) VALUES(1);

UPDATE t SET a=4 WHERE a &lt; 5;

DELETE FROM t WHERE a &lt; 5;
</code></pre>

<p>对于DDL其实我们也可以做的更好，比如对于下面这条SELECT语句的结果集缓存记录来说：</p>

<pre><code>SELECT a FROM t WHERE t.a &gt; 10;
</code></pre>

<p>如果对于下面的DDL，完全可以不去失效SELECT语句的结果集缓存记录。</p>

<pre><code>ALTER TABLE t ADD COLUMN c INT;
</code></pre>

<p>总而言之，Query cache的并发处理的粒度比较大，几乎所有的操作都需要拿到Query cache的全局mutex。如果可以对Query cache的全局状态变量使用Free lock，只对于存储分配使用mutex，对Query_cache_block进行加锁处理会对性能有所改进。</p>

    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
