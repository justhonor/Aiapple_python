<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · TokuDB  · checkpoint过程</title>
  <meta name="description" content="TokuDB的buffer pool（在TokuDB中被称作cachetable）维护几个后台工作线程定期处理一些任务。其中有一个工作线程叫做checkpointer线程，每60秒启动一次把cachetable中所有脏页写回到磁盘上。TokuDB只支持这一种checkpoint方式，用MySQL术语来说就是sha...">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2016/06/06/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2016/06">
    <h1>数据库内核月报 － 2016 / 06</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2016/06/05/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2016/06/07/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/01/" target="_blank">
                
                MySQL · 特性分析 · innodb 锁分裂继承与迁移
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/02/" target="_blank">
                
                MySQL · 特性分析 ·MySQL 5.7新特性系列二
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/03/" target="_blank">
                
                PgSQL · 实战经验 · 如何预测Freeze IO风暴
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/04/" target="_blank">
                
                GPDB · 特性分析· Filespace和Tablespace
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/05/" target="_blank">
                
                MariaDB · 新特性 · 窗口函数
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2016/06/06/" target="_blank">
                
                MySQL · TokuDB  · checkpoint过程
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/07/" target="_blank">
                
                MySQL · 特性分析 · 内部临时表
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/08/" target="_blank">
                
                MySQL · 最佳实践 · 空间优化
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/09/" target="_blank">
                
                SQLServer · 最佳实践 · 数据库实现大容量插入的几种方式
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/06/10/" target="_blank">
                
                MySQL · 引擎特性 · InnoDB COUNT(*) 优化(?)
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · TokuDB  · checkpoint过程
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <p>TokuDB的buffer pool（在TokuDB中被称作cachetable）维护几个后台工作线程定期处理一些任务。<br />
其中有一个工作线程叫做checkpointer线程，每60秒启动一次把cachetable中所有脏页写回到磁盘上。<br />
TokuDB只支持这一种checkpoint方式，用MySQL术语来说就是sharp checkpoint。<br />
每次checkpoint过程写的脏页数目可能会比较多，而且在写回的过程中需要一直持有节点的读写锁，因此，checkpoint时索引的访问性能会受到一定程度的影响。<br />
为了降低checkpoint对性能影响，TokuDB对每个脏页clone一份用于写回，在clone的过程中是持有节点的读写锁的，clone结束会放掉读写锁。</p>

<p>TokuDB checkpoint过程分为如下五个步骤：</p>

<ul>
  <li>获取全局的checkpoint锁</li>
  <li>Begin checkpoint</li>
  <li>End checkpoint</li>
  <li>清理redo日志</li>
  <li>释放全局的checkpoint锁</li>
</ul>

<p>下面我们一起看一下begin checkpoint和end checkpoint的详细过程。</p>

<h2>Begin checkpoint</h2>
<p>在checkpoint开始时刻要做一些准备工作，诸如：</p>

<ol>
  <li>
    <p>pin FT<br />
  给CACHEFILE对应的FT加pinned_by_checkpoint标记，保证CACHEFILE不会从内存里移除。CACHEFILE记录了索引包含的数据节点列表和描述索引对应文件的相关信息。</p>
  </li>
  <li>对每个CACHEFILE加for_checkpoint标记<br />
  标识此CACHEFILE数据属于当前的checkpoint。</li>
  <li>记redo日志<br />
  记录checkpoint开始时刻的lsn。<br />
  写redo日志：begin checkpoint日志项，checkpoint打开索引文件日志项，live txn日志项</li>
  <li>对每个PAIR（数据页）加checkpoint_pending标记<br />
  遍历cachetable里面每个数据页，如果数据页对应的索引文件（CACHEFILE）属于checkpoint，对数据页加checkpoint_pending标记，并加入到全局m_pending_head双向链表里面。</li>
  <li>更新checkpoint header信息<br />
  clone一份FT header，记做ft-&gt;checkpoint_header,记录checkpoint开始时刻BTT（Block Translation Table）的位置。<br />
  TokuDB每次checkpoint都会把数据写到一个新的地方，索引逻辑页号（或者块号）到索引文件offset的映射关系记录在BTT里面。<br />
  ft-&gt;checkpoint_header的类型为FT_CHECKPOINT_INPROGRESS，lsn为checkpoint开始时刻的lsn。</li>
  <li>克隆BTT，BTT里面有个translation表，记录逻辑页号到索引文件offset的映射关系。这个表有三个版本：</li>
</ol>

<ul>
  <li>_current（当前的，类型为TRANSLATION_CURRENT）</li>
  <li>_inprogress（checkpoint开始时刻的，类型为TRANSLATION_INPROGRESS）</li>
  <li>_checkpointed（上次checkpont的，类型为TRANSLATION_CHECKPOINTED）    <br />
就是把TRANSLATION_CURRENT复制一份，并把类型设置为TRANSLATION_INPROGRESS。</li>
</ul>

<p>注：<br />
1, 2阶段在m_cf_list-&gt;read_lock保护下进行<br />
4, 5阶段在此过程在pair list的锁和m_cf_list-&gt;read_lock保护下进行。。<br />
注意是拿了pair list上所有的锁，m_list_lock读锁，m_pending_lock_expensive写锁，m_pending_lock_cheap写锁，保证不能向pair list添加/删除数据页；不能把pair list的数据页evict出内存；同时也阻止在get_and_pin的过程中client线程池帮助写回属于checkpoint的脏页。这三个锁都是保护pair list的，按照不同的功能拆分成三个锁。</p>

<pre><code>void checkpointer::begin_checkpoint() {
    // 1. Initialize the accountability counters.
    m_checkpoint_num_txns = 0;

    // 2. Make list of cachefiles to be included in the checkpoint.
    m_cf_list-&gt;read_lock();
    m_cf_list-&gt;m_active_fileid.iterate&lt;void *, iterate_note_pin::fn&gt;(nullptr);
    m_checkpoint_num_files = m_cf_list-&gt;m_active_fileid.size();
    m_cf_list-&gt;read_unlock();

    // 3. Create log entries for this checkpoint.
    if (m_logger) {
        this-&gt;log_begin_checkpoint();
    }

    bjm_reset(m_checkpoint_clones_bjm);

    m_list-&gt;write_pending_exp_lock();
    m_list-&gt;read_list_lock();
    m_cf_list-&gt;read_lock(); // needed for update_cachefiles
    m_list-&gt;write_pending_cheap_lock();

    // 4. Turn on all the relevant checkpoint pending bits.
    this-&gt;turn_on_pending_bits();

    // 5. Clone BTT and FT header
    this-&gt;update_cachefiles();
    m_list-&gt;write_pending_cheap_unlock();
    m_cf_list-&gt;read_unlock();
    m_list-&gt;read_list_unlock();
    m_list-&gt;write_pending_exp_unlock();
}
</code></pre>

<h2>End checkpoint</h2>

<p>在end checkpoint的阶段</p>

<ul>
  <li>把所有的CACHEFIlE记录在checkpoint_cfs数组里面，为后面的步骤做准备。</li>
  <li>然后调用checkpoint_pending_pairs函数把m_pending_head双向链表的数据页写回到磁盘上。<br />
 Checkpoint_pending_pairs遍历m_pending_head链表，对每个数据页判断是否真的需要写回。<br />
 因为一次checkpoint的时间比较长，有的数据页可能是被client线程池帮忙写回了，这里就不需要再做一次写回操作。如果需要写回，就调用clone_callback克隆一份。<br />
 在clone的过程中是持有数据页的读写锁和disk_nb_mutex（mutex语义，表示有I/O在进行），克隆结束后，释放读写锁，只持有disk_nb_mutex锁，由checkpointer线程把数据页写回（cloned副本）。写回结束后，释放disk_nb_mutex。<br />
  如果数据页没有设置clone_callback（缺省是都会设置的），由checkpointer线程把数据页（注意，是数据页本身）写回，写回过程中是持有读写锁和disk_nb_mutex的。<br />
 写回结束后清除checkpoint_pending标记和dirty标记。<br />
 函数checkpoint_pending_pairs把所有的数据页写回到磁盘上，后面要做的就是metadata的修改。</li>
  <li>对checkpoint_cfs数组的每个CACHEFILE调用checkpoint_userdata回调函数（实际上是ft_checkpoint函数）把BTT（Block Translation Table）和ft-&gt;checkpoint_header序列化到磁盘上。<br />
 BTT的rootnum<br />
 在FT索引文件里有两个位置可以保存ft-&gt;header：偏移0和偏移4096。<br />
 TokuDB采用round robin的方式，把奇数次（1,3,5…）checkpoint的header存储在偏移为0的地方;<br />
 把偶数次（2,4,6,…）checkpoint的header存储在偏移为4096的位置上。<br />
 然后更新ft-&gt;h-&gt;checkpoint_lsn为checkpoint开始时刻的lsn。</li>
  <li>写redo日志：end checkpoint日志项。</li>
  <li>通知logger子系统logger-&gt;last_completed_checkpoint_lsn为checkpoint开始时刻的lsn。</li>
  <li>对checkpoint_cfs数组保存的每个CACHEFILE调用end_checkpoint_userdata回调函数（实际上是ft_end_checkpoint）把_checkpointed记录的上次checkpoint写回的数据页所占用空间释放掉。并且把这次checkpoint的BTT保存在_checkpointed，然后清空_inprogress，表示checkpoint结束，当前没有正在进行的checkpoint。在ft_end_checkpoint里面还做了一个事情就是把ft-&gt;checkpoint_header释放并置为空，到这里checkpoint的工作就完成了。</li>
  <li>unpin FT</li>
</ul>

<pre><code>void checkpointer::end_checkpoint(void (*testcallback_f)(void*),  void* testextra) {
    toku::scoped_malloc checkpoint_cfs_buf(m_checkpoint_num_files * sizeof(CACHEFILE));
    CACHEFILE *checkpoint_cfs = reinterpret_cast&lt;CACHEFILE *&gt;(checkpoint_cfs_buf.get());

    this-&gt;fill_checkpoint_cfs(checkpoint_cfs);
    this-&gt;checkpoint_pending_pairs();
    this-&gt;checkpoint_userdata(checkpoint_cfs);
    // For testing purposes only.  Dictionary has been fsync-ed to disk but log has not yet been written.
    if (testcallback_f) {
        testcallback_f(testextra);
    }
    this-&gt;log_end_checkpoint();
    this-&gt;end_checkpoint_userdata(checkpoint_cfs);

    // Delete list of cachefiles in the checkpoint,
    this-&gt;remove_cachefiles(checkpoint_cfs);

}
</code></pre>

<h2>Checkpoint的redo日志</h2>

<p>下面我们一起看一下checkpoint过程记录的redo日志：</p>

<ul>
  <li>Begin_checkpoint：表示begin checkpoint的日志项</li>
  <li>Fassociate：表示打开的索引的日志项</li>
  <li>End_checkpoint：表示end checkpoint的日志项</li>
</ul>

<pre><code>./tdb_logprint &lt; data/log000000000002.tokulog27
begin_checkpoint         'x': lsn=88 timestamp=1455623796540257 last_xid=153 crc=470dd9ea len=37
fassociate               'f': lsn=89 filenum=0 treeflags=0 iname={len=15 data="tokudb.rollback"} unlink_on_close=0 crc=8606e9b1 len=49
fassociate               'f': lsn=90 filenum=1 treeflags=4 iname={len=18 data="tokudb.environment"} unlink_on_close=0 crc=92dc4c1c len=52
fassociate               'f': lsn=91 filenum=3 treeflags=4 iname={len=16 data="tokudb.directory"} unlink_on_close=0 crc=86323b7e len=50
end_checkpoint           'X': lsn=92 lsn_begin_checkpoint=88 timestamp=1455623796541659 num_fassociate_entries=3 num_xstillopen_entries=0 crc=5cde4ff2 len=45
</code></pre>


    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
