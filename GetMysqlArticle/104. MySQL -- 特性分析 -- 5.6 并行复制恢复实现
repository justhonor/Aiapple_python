<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · 特性分析 · 5.6 并行复制恢复实现</title>
  <meta name="description" content="在上一期的月报中，我们分析了 MySQL 5.6 并行复制是如何实现的，介绍了主要数据结构、Coordinator 线程的分发、Worker 线程的执行和checkpoint过程，读者朋友可以回顾下，本篇将对恢复逻辑进行介绍。">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2015/09/07/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2015/09">
    <h1>数据库内核月报 － 2015 / 09</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2015/09/06/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2015/09/08/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/01/" target="_blank">
                
                MySQL · 引擎特性 ·  InnoDB Adaptive hash index介绍
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/02/" target="_blank">
                
                PgSQL · 特性分析 ·  clog异步提交一致性、原子操作与fsync
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/03/" target="_blank">
                
                MySQL · 捉虫动态 · BUG 几例
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/04/" target="_blank">
                
                PgSQL · 答疑解惑 · 诡异的函数返回值
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/05/" target="_blank">
                
                MySQL · 捉虫动态 · 建表过程中crash造成重建表失败
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/06/" target="_blank">
                
                PgSQL · 特性分析 · 谈谈checkpoint的调度
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2015/09/07/" target="_blank">
                
                MySQL · 特性分析 · 5.6 并行复制恢复实现
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/08/" target="_blank">
                
                MySQL · 备库优化 ·  relay fetch 备库优化
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/09/" target="_blank">
                
                MySQL · 特性分析 · 5.6并行复制事件分发机制
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2015/09/10/" target="_blank">
                
                MySQL · TokuDB · 文件目录谈
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · 特性分析 · 5.6 并行复制恢复实现
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <p>在上一期的月报中，我们分析了 MySQL 5.6 并行复制是如何实现的，介绍了主要数据结构、Coordinator 线程的分发、Worker 线程的执行和checkpoint过程，读者朋友可以<a href="http://mysql.taobao.org/monthly/2015/08/09/" title="5.6 并行复制实现分析">回顾下</a>，本篇将对恢复逻辑进行介绍。</p>

<p>在并行复制之前，SQL线程的恢复很简单，从 relay-log.info 中取得上次执行到的位点，然后从这个位点开始执行即可。有了并行复制之后，情况就变得稍微复杂了些，worker 线程各自执行自己队列的事务，在<code>stop slave</code>或者 mysqld crash的时候，队列中的事务很可能没有执行完，比如crash时GAQ的状态如下图1所示，中间存在空隙(gap)，先分发给 worker a 的事务还未完成，而后分发给 worker b 的事务已经完成，对应就是 relay log 中间有一部分event没执行。我们知道，SQL执行或者分发是顺序读relay log的，如果恢复时从 2 开始执行，3 和 4就会重复执行，如果从4开始执行，2就会被跳过，都不行。并行复制恢复的逻辑就是把 2 找出来执行，把空隙给填上，然后SQL线程就可以 5 开始愉快地跑下去了。</p>

<!-- _includes/image.html -->
<div class="image-wrapper">
    

    
        <img src="/monthly/pic/2015-09-07/gap_of_GAQ.png" alt="GAQ中的空隙" />
    

    

    
        <p class="image-caption">图1. GAQ中的空隙</p>
    
</div>

<h2>信息持久化</h2>

<p>恢复离不开信息的持久化，每个worker线程对应一个worker.info，定期将执行位点信息刷入worker.info。类似于relay-log.info，worker.info 可以存在表中，也可以存在文件中，取决于配置<code>relay_log_info_repository</code>，刷写频率由 <code>sync_relay_log_info</code> 控制。</p>

<p>下面是relay-log.info中存的信息：</p>

<pre><code>  Number_of_lines: 后面有多少行(文件)或字段(表)
   Relay_log_name: 执行到的relay log 的文件名
    Relay_log_pos: 执行到的relay log 的位置
  Master_log_name: 执行到的对应在主库 binlog 的文件名
   Master_log_pos: 执行到的对应在主库 binlog 的位置
        Sql_delay: SQL线程必须落后master的时间，通过 CHANGE MASTER TO MASTER_DELAY=X 指定
Number_of_workers: worker线程个数
               Id: 内部用的
</code></pre>

<p>下面是worker.info中存的信息：</p>

<pre><code>                        Id: worker 的 id
            Relay_log_name: 执行到的relay log 的文件名
             Relay_log_pos: 执行到的relay log 的位置
           Master_log_name: 执行到的对应在主库 binlog 的文件名
            Master_log_pos: 执行到的对应在主库 binlog 的位置
 Checkpoint_relay_log_name: 上次 checkpoint 后，分发到的第一个 group 所在的 relay log 文件名
  Checkpoint_relay_log_pos: 同上，对应 relay log 中的位置
Checkpoint_master_log_name: 同上，对应在主库 binlog 的文件名
 Checkpoint_master_log_pos: 同上，对应在主库 binlog 中的位置
          Checkpoint_seqno: 当前执行到事务序列，从上次checkpoint后开始算
     Checkpoint_group_size: checkpoint_group_bitmap 的长度，多少个BYTE
   Checkpoint_group_bitmap: 从上次 checkpoitn 执行事务的标记
</code></pre>
<p>每个字段对应Slave_worer类的一个成员（Checkpoint_group_size除外），这其中比较重要的就是 Checkpoint_group_bitmap，记录哪些事务是执行过的，下面会介绍对bitmap的操作。</p>

<h2>bitmap 记录执行事务</h2>

<p>本节介绍对 <code>Slave_worker::group_executed</code> 这个bitmap的操作，在此之前需要介绍另一个变量 <code>Relay_log_info::checkpoint_seqno</code>，对 Coordinator 线程来说，表示从上次checkpoint调整后，下一个分发的事务编号，同时对应GAQ中事务(Slave_job_group)的个数，我们在上期介绍过，GAQ中存的是Coordinator 线程分发的、尚未被checkpoint出队的事务（可能已经被worker执行完了）；对woker线程来说，这个对应当前worker执行到的事务编号。</p>

<p>Coordinator 线程每分发一个事务，checkpoint_seqno 加 1；每次checkpoint后，会将 checkpoint_seqno 减去cnt（cnt为checkpoint时GAQ中出队的事务的个数）。worker 线程每执行完一个事务，会将 group_executed 的 checkpoint_seqno 位置1；如果遇到checkpoint，会将bitmap向左移位。</p>

<p>如下图所示，GAQ中第0、2、5个事务分发给了worker a，第0个已经执行完成，所以 worker a 的 bitmap 中，第0位置1；worker b 和 worker c 的 bitmap 同理，标识已经执行的事务。</p>

<!-- _includes/image.html -->
<div class="image-wrapper">
    

    
        <img src="/monthly/pic/2015-09-07/bitmap_before_checkpoint.png" alt="worker线程的bitmap" />
    

    

    
        <p class="image-caption">图2. worker的bitmap</p>
    
</div>

<p>假设这个时候 Coordinator 线程做了一次 checkpoint，将队列头部2个已经完成的事务出队，然后将<code>rli-&gt;checkpoint_seqno</code>减2，同时将2累加到每个 <code>worker-&gt;bitmap_shifted</code> 中，当Coordinator 线程将新的事务分给worker的时候，会将 <code>worker-&gt;bitmap_shifted</code> 取出，存人当前<code>Slave_job_group.shifted</code> 中，当worker执行到这个group，就开始对 group_executed 进行偏移，偏移量就是<code>Slave_job_group.shitfed</code> （再一次说明了GAQ中的Slave_job_group，充当了Coordinator 线程和worker线程通信的角色）。bitmap的变化就如下图所示，checkpoint后，原来的0和1出队，然后新的4、5、6加入进来，新分发给worker b 和 worker c 的 4 和 6 已经执行完成，所以bitamp和上图相比，已经向左路偏移了2位，而新分发worker a的5并示执行，所以worker a 的bitmap还未偏移。</p>

<!-- _includes/image.html -->
<div class="image-wrapper">
    

    
        <img src="/monthly/pic/2015-09-10/bitmap_after_checkpoint.png" alt="checkpoint后worker线程的bitmap" />
    

    

    
        <p class="image-caption">图3. checkpoint后worker的bitmap</p>
    
</div>

<p>group_executed bitmap的长度和GAQ大小一样，由配置<code>slave_checkpoint_group</code>决定。</p>

<h2>恢复逻辑</h2>

<p>恢复的主要逻辑是<code>mts_recovery_groups()</code> 这个函数。</p>

<p>在启动slave的时候，如果relay-log.info中存的Number_of_workers不为0，就说明之前是并行复制，然后调用 <code>mts_recovery_groups()</code>，进入恢复逻辑。如前所述，<code>mts_recovery_groups()</code> 的目的就是根据 slave_worker_info 和 slave_info 中信息，把空隙事务找出来。</p>

<p>首先会创建 Number_of_workers 个 worker，依次把每个worker.info的信息读出来，然后把worker执行位点信息和relay-log.info中记录的位点信息（低水位）相比，如果比后者小，说明崩溃前已经被checkpoint出队，不可能造成空隙，直接跳过；如果比后者大，就把worker存入 <code>above_lwm_jobs</code> 数组。<br />
<code>above_lwm_jobs</code>收集完成后，初始化bitmap <code>rli-&gt;recovery_groups</code>，用来汇总每个worker的bitmap。对 <code>above_lwm_jobs</code> 中的每个worker，设置一个计数器<code>recovery_group_cnt</code>，从低水位位点开始扫relay log，每扫完一个事务，<code>recovery_group_cnt</code>加1，直到扫到worker.info中记录的位点为止，之后把worker的bitmap汇总到<code>rli-&gt;recovery_groups</code>中，其间会统计一个最大的 <code>recovery_group_cnt</code>，记入<code>rli-&gt;mts_recovery_group_cnt</code>，这个对应高水位。 bitmap 汇总逻辑如下：</p>

<pre><code>sql/rpl_slave.cc:8965
for (uint i= (w-&gt;checkpoint_seqno + 1) - recovery_group_cnt,
     j= 0; i &lt;= w-&gt;checkpoint_seqno; i++, j++)
{
  if (bitmap_is_set(&amp;w-&gt;group_executed, i))
  {
    DBUG_PRINT("mts", ("Setting bit %u.", j));
    bitmap_fast_test_and_set(groups, j);
  }
}
</code></pre>

<p>之后SQL线程就可以从低水位往高水位扫relay log，对于每个事务，如果 <code>rli-&gt;recovery_groups</code> 对应bit为1，说明崩溃前已经执行过，就跳过；反之，就对事务中的每个event调用 <code>do_apply_event()</code>执行。扫描到高水位后整个恢复逻辑结束，后面SQL线程就进入正常的执行逻辑，执行（串行）或者分发（并行）event。</p>

    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
