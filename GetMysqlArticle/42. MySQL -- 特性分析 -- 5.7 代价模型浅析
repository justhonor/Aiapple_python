<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · 特性分析 · 5.7 代价模型浅析</title>
  <meta name="description" content="代价模型mysql 5.7代价计算相对之前的版本有较大的改进。例如">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2016/07/02/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2016/07">
    <h1>数据库内核月报 － 2016 / 07</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2016/07/01/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2016/07/03/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/01/" target="_blank">
                
                MySQL · 特性分析 ·MySQL 5.7新特性系列三
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2016/07/02/" target="_blank">
                
                MySQL · 特性分析 · 5.7 代价模型浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/03/" target="_blank">
                
                PgSQL · 实战经验 · 分组TOP性能提升44倍
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/04/" target="_blank">
                
                MySQL · 源码分析 · 网络通信模块浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/05/" target="_blank">
                
                MongoDB · 特性分析 · 索引原理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/06/" target="_blank">
                
                SQLServer · 特性分析 · XML与JSON应用比较
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/07/" target="_blank">
                
                MySQL · 最佳实战 · 审计日志实用案例分析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/08/" target="_blank">
                
                MySQL · 性能优化 · 条件下推到物化表
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/09/" target="_blank">
                
                MySQL · 源码分析 · Query Cache内部剖析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/10/" target="_blank">
                
                MySQL · 捉虫动态 · 备库1206错误问题说明
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · 特性分析 · 5.7 代价模型浅析
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <h2>代价模型</h2>
<p>mysql 5.7代价计算相对之前的版本有较大的改进。例如</p>

<ul>
  <li>代价模型参数可以动态配置，可以适应不同的硬件</li>
  <li>区分考虑数据在内存和在磁盘中的代价</li>
  <li>代价精度提升为浮点型</li>
  <li>jion计算时不仅要考虑condition,还要考虑condition上的filter，具体参见参数condition_fanout_filter</li>
</ul>

<p>5.7 在代价类型上分为io,cpu和memory, 5.7的代价模型还在完善中，memory的代价虽然已经收集了，但还没有没有计算在最终的代价中。<br />
5.7 在源码上对代价模型进行了大量重构，代价分为server层和engine层。server层主要是cpu的代价，而engine层主要是io的代价。<br />
5.7 引入了两个系统表mysql.server_cost和mysql.engine_cost来分别配置这两个层的代价。<br />
以下分析均基于mysql5.7.10</p>

<h2>server_cost</h2>
<ul>
  <li>row_evaluate_cost (default 0.2)<br />
计算符合条件的行的代价，行数越多，此项代价越大</li>
  <li>memory_temptable_create_cost (default 2.0)<br />
内存临时表的创建代价</li>
  <li>memory_temptable_row_cost (default 0.2)<br />
内存临时表的行代价</li>
  <li>key_compare_cost (default 0.1)<br />
键比较的代价，例如排序</li>
  <li>disk_temptable_create_cost (default 40.0)<br />
内部myisam或innodb临时表的创建代价</li>
  <li>disk_temptable_row_cost (default 1.0)<br />
内部myisam或innodb临时表的行代价</li>
</ul>

<p>由上可以看出创建临时表的代价是很高的，尤其是内部的myisam或innodb临时表。</p>

<h2>engine_cost</h2>
<ul>
  <li>io_block_read_cost (default 1.0)<br />
从磁盘读数据的代价，对innodb来说，表示从磁盘读一个page的代价</li>
  <li>
    <p>memory_block_read_cost (default 1.0)<br />
从内存读数据的代价，对innodb来说，表示从buffer pool读一个page的代价</p>

    <p>目前io_block_read_cost和memory_block_read_cost默认值均为1，实际生产中建议酌情调大memory_block_read_cost，特别是对普通硬盘的场景。</p>
  </li>
</ul>

<h2>代价配置</h2>

<p>cost参数可以通过修改mysql.server_cost和mysql.engine_cost来实现。初始这两个表中的记录cost_value项均为NULL, 代价值都取上两节介绍的初始值。<br />
当修改cost_value为非NULL时，代价值按设定的值计算。修改方法如下：</p>

<pre><code class="language-sql">## 修改io_block_read_cost值为2
UPDATE mysql.engine_cost
  SET cost_value = 2.0
  WHERE cost_name = 'io_block_read_cost';
# FLUSH OPTIMIZER_COSTS 生效，只对新连接有效，老连接无效。
FLUSH OPTIMIZER_COSTS;
</code></pre>

<p>另外，在主备环境下，修改cost参数时主备都要修改。因为mysql.server_cost和mysql.engine_cost的更新不会参与复制。</p>

<h2>代价分析示例</h2>

<p>初始化数据</p>

<pre><code>create table t1(c1 int primary key, c2 int unique,c3 int) engine=innodb;

let $loop=100;
while($loop)
{
  eval insert into t1(c1,c2,c3) values($loop, $loop+1, $loop+2);
  dec $loop;
}

set optimizer_trace = "enabled=on";
</code></pre>
<p>cost参数都取默认值，以下示例中会用到row_evaluate_cost(0.2),io_block_read_cost(1.0),io_block_read_cost(1.0),memory_block_read_cost(1.0)</p>

<h3>示例1</h3>

<p>以下语句选择覆盖索引c2</p>

<pre><code>explain select c1,c2 from t1 where c2 &gt; 10;
id      select_type     table   partitions      type    possible_keys   key     key_len ref     rows    filtered        Extra
1       SIMPLE  t1      NULL    range   c2      c2      5       NULL    91      100.00  Using where; Using index
</code></pre>

<p>查看optimizer_trace, 可以看出全表扫描代价为23.1，通过c2上的索引扫描代价为19.309， 最后选择c2上的索引扫描。</p>

<pre><code>     "rows_estimation": [
       {
         "table": "`t1`",
         "range_analysis": {
           "table_scan": {
             "rows": 100,
             "cost": 23.1
           },
           "potential_range_indexes": [
             {
               "index": "PRIMARY",
               "usable": false,
               "cause": "not_applicable"
             },
             {
               "index": "c2",
               "usable": true,
               "key_parts": [
                 "c2"
               ]
             }
           ],
           "best_covering_index_scan": {
             "index": "c2",
             "cost": 21.109,
             "chosen": true
           },
           "setup_range_conditions": [
           ],
           "group_index_range": {
             "chosen": false,
             "cause": "not_group_by_or_distinct"
           },
           "analyzing_range_alternatives": {
             "range_scan_alternatives": [
               {
                 "index": "c2",
                 "ranges": [
                   "10 &lt; c2"
                 ],
                 "index_dives_for_eq_ranges": true,
                 "rowid_ordered": false,
                 "using_mrr": false,
                 "index_only": true,
                 "rows": 91,
                 "cost": 19.309,
                 "chosen": true
               }
             ],
             "analyzing_roworder_intersect": {
               "usable": false,
               "cause": "too_few_roworder_scans"
             }
           },
           "chosen_range_access_summary": {
             "range_access_plan": {
               "type": "range_scan",
               "index": "c2",
               "rows": 91,
               "ranges": [
                 "10 &lt; c2"
               ]
             },
             "rows_for_plan": 91,
             "cost_for_plan": 19.309,
             "chosen": true
           }
         }
       }
     ]
   },
   {
     "considered_execution_plans": [
       {
         "plan_prefix": [
         ],
         "table": "`t1`",
         "best_access_path": {
           "considered_access_paths": [
             {
               "rows_to_scan": 91,
               "access_type": "range",
               "range_details": {
                 "used_index": "c2"
               },
               "resulting_rows": 91,
               "cost": 37.509,
               "chosen": true
             }
           ]
         },
         "condition_filtering_pct": 100,
         "rows_for_plan": 91,
         "cost_for_plan": 37.509,
         "chosen": true
       }
     ]
</code></pre>

<p><strong>全表扫描的代价23.1</strong></p>

<p>包括io和cpu的代价</p>

<pre><code>test_quick_select：
 double scan_time=                                                    
   cost_model-&gt;row_evaluate_cost(static_cast&lt;double&gt;(records)) + 1;   
 Cost_estimate cost_est= head-&gt;file-&gt;table_scan_cost();               
 cost_est.add_io(1.1);//这里加1.1应该是个调节值                                                
 cost_est.add_cpu(scan_time);   
</code></pre>

<p>其中io代价table_scan_cost会根据buffer pool大小和索引大小来估算page in memory和in disk的比例，分别算出代价。</p>

<pre><code>handler::table_scan_cost()
  ha_innobase::scan_time()*table-&gt;cost_model()-&gt;page_read_cost(1.0);//1*1=1
  //其中scan_time计算数据所占page数，
</code></pre>
<p>page_read_cost计算读取单个page的代价</p>

<pre><code> buffer_block_read_cost(pages_in_mem) + io_block_read_cost(pages_on_disk); 
</code></pre>

<p>io代价为1+1.1=2.1</p>

<p>cpu代价为row_evaluate_cost</p>

<pre><code>double row_evaluate_cost(double rows) const
{
  DBUG_ASSERT(m_initialized);
  DBUG_ASSERT(rows &gt;= 0.0);
  
  return rows * m_server_cost_constants-&gt;row_evaluate_cost(); // 100 * 0.2(row_evaluate_cost)=20;
}
</code></pre>
<p>cpu代价为20+1=21；</p>

<p>最终代价为2.1+21=23.1</p>

<p><strong>c2索引扫描代价19.309</strong></p>

<p>同样也分为io和cpu代价</p>

<pre><code>multi_range_read_info_const：

  *cost= index_scan_cost(keyno, static_cast&lt;double&gt;(n_ranges),
                          static_cast&lt;double&gt;(total_rows));
  cost-&gt;add_cpu(cost_model-&gt;row_evaluate_cost(static_cast&lt;double&gt;(total_rows)) + 0.01);
</code></pre>

<p>io代价 1.0987925356750823*1=1.0987925356750823</p>

<pre><code>index_scan_cost:
  const double io_cost= index_only_read_time(index, rows) *  //估算index占page个数  = 1.0987925356750823
  table-&gt;cost_model()-&gt;page_read_cost_index(index, 1.0);     //根据buffer pool大小和索引大小来估算page in memory和in disk的比例，计算读一个page的代价。 = 1
</code></pre>
<p>cpu代价91*0.2+0.01=18.21</p>

<pre><code>cost-&gt;add_cpu(cost_model-&gt;row_evaluate_cost(
  static_cast&lt;double&gt;(total_rows)) + 0.01);  //这里根据过滤条件算出的total_rows为91
</code></pre>

<p>最终代价1.0987925356750823+18.21=19.309</p>

<h3>示例2</h3>

<p>以下语句选择了全表扫描</p>

<pre><code>explain select * from t1 where c2 &gt; 10;
id      select_type     table   partitions      type    possible_keys   key     key_len ref     rows    filtered        Extra
1       SIMPLE  t1      NULL    ALL     c2      NULL    NULL    NULL    100     91.00   Using where
</code></pre>

<p>查看optimizer_trace, 可以看出全表扫描代价为23.1，通过c2上的索引扫描代价为110.21， 最后选择全表扫描。</p>

<pre><code> "rows_estimation": [
              {
                "table": "`t1`",
                "range_analysis": {
                  "table_scan": {
                    "rows": 100,
                    "cost": 23.1
                  },
                  "potential_range_indexes": [
                    {
                      "index": "PRIMARY",
                      "usable": false,
                      "cause": "not_applicable"
                    },
                    {
                      "index": "c2",
                      "usable": true,
                      "key_parts": [
                        "c2"
                      ]
                    }
                  ],
                  "setup_range_conditions": [
                  ],
                  "group_index_range": {
                    "chosen": false,
                    "cause": "not_group_by_or_distinct"
                  },
                  "analyzing_range_alternatives": {
                    "range_scan_alternatives": [
                      {
                        "index": "c2",
                        "ranges": [
                          "10 &lt; c2"
                        ],
                        "index_dives_for_eq_ranges": true,
                        "rowid_ordered": false,
                        "using_mrr": false,
                        "index_only": false,
                        "rows": 91,
                        "cost": 110.21,
                        "chosen": false,
                        "cause": "cost"
                      }
                    ],
                    "analyzing_roworder_intersect": {
                      "usable": false,
                      "cause": "too_few_roworder_scans"
                    }
                  }
                }
              }
            ]
          },
          {
            "considered_execution_plans": [
              {
                "plan_prefix": [
                ],
                "table": "`t1`",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "rows_to_scan": 100,
                      "access_type": "scan",
                      "resulting_rows": 91,
                      "cost": 21,
                      "chosen": true
                    }
                  ]
                },
                "condition_filtering_pct": 100,
                "rows_for_plan": 91,
                "cost_for_plan": 21,
                "chosen": true
              }
            ]
          },
</code></pre>
<p><strong>全表扫描代价23.1</strong></p>

<p>同上一节分析</p>

<p><strong>c2索引扫描代价为110.21</strong></p>

<p>上一节通过c2索引扫描代价为19.309，因为是覆盖索引不需要回表，所以代价较少。而此例是需要回表的。</p>

<pre><code>multi_range_read_info_const：
    *cost= read_cost(keyno, static_cast&lt;double&gt;(n_ranges),
                     static_cast&lt;double&gt;(total_rows));    
  cost-&gt;add_cpu(cost_model-&gt;row_evaluate_cost(            
    static_cast&lt;double&gt;(total_rows)) + 0.01);     
</code></pre>

<p>io代价需回表</p>

<pre><code>read_cost: //92*1=92
  const double io_cost= read_time(index, static_cast&lt;uint&gt;(ranges)
                                static_cast&lt;ha_rows&gt;(rows)) *
                                table-&gt;cost_model()-&gt;page_read_cost(1.0);   
                                
read_time: //91+1=92
virtual double read_time(uint index, uint ranges, ha_rows rows)
{ return rows2double(ranges+rows); }  

</code></pre>
<p>这里回表时计算代价为每行代价为1，默认认为回表时每行都对于聚集索引的一个page.</p>

<p>io代价为92</p>

<p>cpu代价为91*0.2+0.01=18.21<br />
<code>
cost-&gt;add_cpu(cost_model-&gt;row_evaluate_cost(            
    static_cast&lt;double&gt;(total_rows)) + 0.01);  
</code></p>

<p>最后代价为92+18.21=110.21</p>

<h2>总结</h2>
<p>5.7 代价模型优化还在持续改进中，相信后续的版本会越来越好。代价的参数的配置需谨慎，需要大量的测试和验证。</p>

    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
