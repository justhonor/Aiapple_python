<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · 答疑解惑 · 备库Seconds_Behind_Master计算</title>
  <meta name="description" content="背景">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2016/03/09/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2016/03">
    <h1>数据库内核月报 － 2016 / 03</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2016/03/08/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2016/03/10/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/01/" target="_blank">
                
                MySQL · TokuDB · 事务子系统和 MVCC 实现
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/02/" target="_blank">
                
                MongoDB · 特性分析 · MMAPv1 存储引擎原理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/03/" target="_blank">
                
                PgSQL · 源码分析 · 优化器逻辑推理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/04/" target="_blank">
                
                SQLServer · BUG分析 · Agent 链接泄露分析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/05/" target="_blank">
                
                Redis · 特性分析 · AOF Rewrite 分析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/06/" target="_blank">
                
                MySQL · BUG分析 · Rename table 死锁分析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/07/" target="_blank">
                
                MySQL · 物理备份 · Percona XtraBackup 备份原理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/08/" target="_blank">
                
                GPDB · 特性分析· GreenPlum FTS 机制
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2016/03/09/" target="_blank">
                
                MySQL · 答疑解惑 · 备库Seconds_Behind_Master计算
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/03/10/" target="_blank">
                
                MySQL · 答疑解惑 · MySQL 锁问题最佳实践
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · 答疑解惑 · 备库Seconds_Behind_Master计算
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <h2>背景</h2>

<p>在mysql主备环境下，主备同步过程如下，主库更新产生binlog, 备库io线程拉取主库binlog生成relay log。备库sql线程执行relay log从而保持和主库同步。</p>

<!-- _includes/image.html -->
<div class="image-wrapper">
    

    
        <img src="/monthly/pic/2016-03-09/1.png" alt="" />
    

    

    
        <p class="image-caption"></p>
    
</div>

<p>理论上主库有更新时，备库都存在延迟，且延迟时间为备库执行时间+网络传输时间即t4-t2。</p>

<p>那么mysql是怎么来计算备库延迟的？</p>

<p>先来看show slave status中的一些信息，io线程拉取主库binlog的位置：</p>

<pre><code>Master_Log_File: mysql-bin.000001
Read_Master_Log_Pos: 107
</code></pre>

<p>sql线程执行relay log的位置：</p>

<pre><code> Relay_Log_File: slave-relay.000003
 Relay_Log_Pos: 253
</code></pre>

<p>sql线程执行的relay log相对于主库binlog的位置：</p>

<pre><code>Relay_Master_Log_File: mysql-bin.000001
Exec_Master_Log_Pos: 107
</code></pre>

<h2>源码实现</h2>

<p>Seconds_Behind_Master计算的源码实现如下：</p>

<pre><code>if ((mi-&gt;get_master_log_pos() == mi-&gt;rli-&gt;get_group_master_log_pos()) &amp;&amp;
    (!strcmp(mi-&gt;get_master_log_name(), mi-&gt;rli-&gt;get_group_master_log_name())))
{
  if (mi-&gt;slave_running == MYSQL_SLAVE_RUN_CONNECT)
    protocol-&gt;store(0LL);
  else
    protocol-&gt;store_null();
}
else
{
  long time_diff= ((long)(time(0) - mi-&gt;rli-&gt;last_master_timestamp)
                   - mi-&gt;clock_diff_with_master);

  protocol-&gt;store((longlong)(mi-&gt;rli-&gt;last_master_timestamp ? max(0L, time_diff) : 0));
}
</code></pre>

<p>大致可以看出是通过时间和位点来计算的，下面详细分析下。</p>

<p>if里面条件表示如果io线程拉取主库binlog的位置和sql线程执行的relay log相对于主库binlog的位置相等，那么认为延迟为0。一般情况下，io线程比sql线程快。但如果网络状况特别差，导致sql线程需等待io线程的情况，那么这两个位点可能相等，会导致误认为延迟为0。</p>

<p>再看else里：</p>

<ul>
  <li>
    <p><code>clock_diff_with_master</code><br />
 io线程启动时会向主库发送sql语句“SELECT UNIX_TIMESTAMP()”，获取主库当前时间，然而用备库当前时间减去此时间或者主备时间差值即为<code>clock_diff_with_master</code>。这里如果有用户中途修改了主库系统时间或修改了timestamp变量，那么计算出备库延迟时间就是不准确的。</p>
  </li>
  <li>
    <p><code>last_master_timestamp</code><br />
表示主库执行binlog事件的时间。此时间在并行复制和非并行复制时的计算方法是不同的</p>
  </li>
</ul>

<p>非并行复制：<br />
备库sql线程读取了relay log中的event，event未执行之前就会更新<code>last_master_timestamp</code>，这里时间的更新是以event为单位。</p>

<pre><code>rli-&gt;last_master_timestamp= ev-&gt;when.tv_sec + (time_t) ev-&gt;exec_time;
</code></pre>

<p>ev-&gt;when.tv_sec表示事件的开始时间。exec_time指事件在主库的执行时间，只有<code>Query_log_event</code>和<code>Load_log_event</code>才会统计exec_time。<br />
另外一种情况是sql线程在等待io线程获取binlog时，会将<code>last_master_timestamp</code>设为0，按上面的算法Seconds_Behind_Master为0，此时任务备库是没有延迟的。</p>

<p>并行复制：</p>

<blockquote>
  <p>并行复制有一个分发队列gaq，sql线程将binlog事务读取到gaq，然后再分发给worker线程执行。并行复制时，binlog事件是并发穿插执行的，gaq中有一个checkpoint点称为lwm, lwm之前的binlog都已经执行，而lwm之后的binlog有些执行有些没有执行。<br />
假设worker线程数为2，gap有1,2,3,4,5,6,7,8个事务。worker 1已执行的事务为1 4 6, woker 2执行的事务为2 3 ，那么lwm为4。</p>
</blockquote>

<p>并行复制更新gap checkpiont时，会推进lwm点，同时更新<code>last_master_timestamp</code>为lwm所在事务结束的event的时间。因此，并行复制是在事务执行完成后才更新<code>last_master_timestamp</code>，更新是以事务为单位。同时更新gap checkpiont还受<code>slave_checkpoint_period</code>参数的影响。</p>

<p>这导致并行复制下和非并行复制统计延迟存在差距，差距可能为<code>slave_checkpoint_period</code> + 事务在备库执行的时间。这就是为什么在并行复制下有时候会有很小的延迟，而改为非并行复制时反而没有延迟的原因。</p>

<p>另外当sql线程等待io线程时且gaq队列为空时，会将<code>last_master_timestamp</code>设为0。同样此时认为没有延迟，计算得出<code>seconds_Behind_Master</code>为0。</p>

<h2>位点信息维护</h2>

<ul>
  <li>
    <p>io线程拉取binlog的位点</p>

    <pre><code>Master_Log_File 读取到主库ROTATE_EVENT时会更新(process_io_rotate)
Read_Master_Log_Pos:io线程每取到一个event都会从event中读取pos信息并更新
mi-&gt;set_master_log_pos(mi-&gt;get_master_log_pos() + inc_pos);
</code></pre>
  </li>
  <li>
    <p>sql线程执行relay log的位置</p>

    <pre><code>Relay_Log_File
  sql线程处理ROTATE_EVENT时更新(Rotate_log_event::do_update_pos)
Relay_Log_Pos:
  非并行复制时，每个语句执行完成更新(stmt_done)
并行复制时，事务完成时更新(Rotate_log_event::do_update_pos/ Xid_log_event::do_apply_event/stmt_done)
</code></pre>
  </li>
  <li>
    <p>sql线程执行的relay log相对于主库binlog的位置</p>

    <pre><code>Relay_Master_Log_File
  sql线程处理ROTATE_EVENT时更新(Rotate_log_event::do_update_pos)
Exec_Master_Log_Pos 和Relay_Log_Pos同时更新
  非并行复制时，每个语句执行完成更新(stmt_done)
  并行复制时，事务完成时更新(Rotate_log_event::do_update_pos/ Xid_log_event::do_apply_event/stmt_done)
</code></pre>
  </li>
</ul>

<p>谈到位点更新就有必要说到两个事件：HEARTBEAT_LOG_EVENT 和 ROTATE_EVENT。</p>

<ul>
  <li>
    <p>HEARTBEAT_LOG_EVENT<br />
HEARTBEAT_LOG_EVENT我们的了解一般作用是，在主库没有更新的时候，每隔<code>master_heartbeat_period</code>时间都发送此事件保持主库与备库的连接。而HEARTBEAT_LOG_EVENT另一个作用是，在gtid模式下，主库有些gtid备库已经执行同时，这些事件虽然不需要再备库执行，但读取和应用binglog的位点还是要推进。因此，这里将这类event转化为HEARTBEAT_LOG_EVENT，由HEARTBEAT_LOG_EVENT帮助我们推进位点。</p>
  </li>
  <li>
    <p>ROTATE_EVENT</p>

    <p>主库binlog切换产生的ROTATE_EVENT，备库io线程收到时会也有切换relay log。此rotate也会记入relay log，sql线程执行ROTATE_EVENT只更新位点信息。备库io线程接受主库的HEARTBEAT_LOG_EVENT，一般不用户处理。前面提到，gtid模式下，当HEARTBEAT_LOG_EVENT的位点大于当前记录的位点时，会构建一个ROTATE_EVENT,从而让sql线程推进位点信息。</p>

    <pre><code>if (mi-&gt;is_auto_position()  &amp;&amp; mi-&gt;get_master_log_pos() &lt; hb。log_pos
    &amp;&amp;  mi-&gt;get_master_log_name() != NULL)
{
  mi-&gt;set_master_log_pos(hb。log_pos);
  write_ignored_events_info_to_relay_log(mi-&gt;info_thd, mi); //构建ROTATE_EVENT
  ......
}
</code></pre>
  </li>
</ul>

<p>另外，在<code>replicate_same_server_id</code>为0时，备库接收到的binlog与主库severid相同时，备库会忽略此binlog，但位点仍然需要推进。为了效率，此binlog不需要记入relay log。而是替换为ROTATE_EVENT来推进位点。</p>

<h2>延迟现象</h2>

<p>初始主备是同步的，且没有任何更新。假设主备库执行某个DDL在都需要30s，执行某个大更新事务(例如insert..select * from )需要30s。</p>

<p>不考虑网络延迟。</p>

<!-- _includes/image.html -->
<div class="image-wrapper">
    

    
        <img src="/monthly/pic/2016-03-09/2.png" alt="" />
    

    

    
</div>

<ul>
  <li>
    <p>非并行复制时</p>

    <p>执行DDL：t2时刻主库执行完，t2时刻备库执行show slave status，Seconds_Behind_Master值为0。同时t2至t3 Seconds_Behind_Master依次增大至30，然后跌0。</p>

    <p>执行大事务：t2时刻主库执行完，t2时刻备库执行show slave status，Seconds_Behind_Master值为30。同时t2至t3 Seconds_Behind_Master依次增大至60，然后跌0。</p>

    <p>以上区别的原因是exec_time只有<code>Query_log_event</code>和<code>Load_log_event</code>才会统计，普通更新没有统计导致。</p>
  </li>
  <li>
    <p>并行复制时</p>

    <p>执行DDL：t2时刻主库执行完，t2至t3备库执行show slave status，Seconds_Behind_Master值一直为0</p>

    <p>执行大事务：t2时刻主库执行完，t2至t3备库执行show slave status，Seconds_Behind_Master值一直为0</p>

    <p>这是因为执行语句之前主备是完全同步的，gaq队列为空，会将<code>last_master_timestamp</code>设为0。而执行DDL过程中，gap checkpoint一直没有推进，<code>last_master_timestamp</code>一直未0，直到DDL或大事务完成。<br />
所以t2至t3时刻Seconds_Behind_Master值一直为0。而t3时刻有一瞬间<code>last_master_timestamp</code>是会重置的，但又因<code>slave_checkpoint_period</code>会推进checkpoint,gaq队列变为空，会将<code>last_master_timestamp</code>重设为0。<br />
因此t3时刻可能看到瞬间有延迟(对于DDL是延迟30s,对于大事务时延迟60s)。</p>

    <p>这似乎很不合理，gaq队列为空，会将<code>last_master_timestamp</code>设为0,这条规则实际可以去掉。</p>
  </li>
</ul>

<h2>相关bug</h2>

<p><a href="http://bugs。mysql。com/bug。php?id=72376">BUG#72376</a>, PREVIOUS_GTIDS_LOG_EVENT 事件记录在每个binlog的开头，表示先前所有文件的gtid集合。relay-log本身event记录是主库的时间，但relay log开头的PREVIOUS_GTIDS_LOG_EVENT事件，是在slave端生成的，时间也是以slave为准的。因此不能用此时间计算<code>last_master_timestamp</code>。修复方法是在relay log写PREVIOUS_GTIDS_LOG_EVENT事件是标记是relay log产生的，在统计<code>last_master_timestamp</code>时，发现是relay产生的事件则忽略统计。</p>

<pre><code>if (is_relay_log)
  prev_gtids_ev。set_relay_log_event();
   ......
if (!(ev-&gt;is_artificial_event()||...))
   rli-&gt;last_master_timestamp= ev-&gt;when。tv_sec + (time_t) ev-&gt;exec_time;
</code></pre>

<h2>总结</h2>

<p>Seconds_Behind_Master的计算并不准确和可靠。并行复制下Seconds_Behind_Master值比非并行复制时偏大。因此当我们判断备库是否延迟时，根据Seconds_Behind_Master=0不一定可靠。但是，当我们进行主备切换时，在主库停写的情况下，我们可以根据位点来判断是否完全同步。</p>

<p>如果(Relay_Master_Log_File, Exec_Master_Log_Pos)和(Relay_Master_Log_File, Read_Master_Log_Pos)位置相等且Seconds_Behind_Master=0，那么我们可以认为主备是完成同步的，可以进行切换。</p>


    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
