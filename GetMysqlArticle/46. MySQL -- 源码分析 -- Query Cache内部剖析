<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · 源码分析 · Query Cache内部剖析</title>
  <meta name="description" content="Query Cache背景Query Cache在其他数据库里面也称为结果集缓存。顾名思义，它的目的是将SELECT语句与其返回结果缓存到Query Cache中，如果重复执行相同的SELECT语句的话，我们可以跳过MySQL的解析、优化、执行阶段，将SELECT的查询结果直接返回到客户端，加速SELECT语句的执行。">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2016/07/09/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2016/07">
    <h1>数据库内核月报 － 2016 / 07</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2016/07/08/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2016/07/10/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/01/" target="_blank">
                
                MySQL · 特性分析 ·MySQL 5.7新特性系列三
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/02/" target="_blank">
                
                MySQL · 特性分析 · 5.7 代价模型浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/03/" target="_blank">
                
                PgSQL · 实战经验 · 分组TOP性能提升44倍
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/04/" target="_blank">
                
                MySQL · 源码分析 · 网络通信模块浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/05/" target="_blank">
                
                MongoDB · 特性分析 · 索引原理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/06/" target="_blank">
                
                SQLServer · 特性分析 · XML与JSON应用比较
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/07/" target="_blank">
                
                MySQL · 最佳实战 · 审计日志实用案例分析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/08/" target="_blank">
                
                MySQL · 性能优化 · 条件下推到物化表
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2016/07/09/" target="_blank">
                
                MySQL · 源码分析 · Query Cache内部剖析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/10/" target="_blank">
                
                MySQL · 捉虫动态 · 备库1206错误问题说明
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · 源码分析 · Query Cache内部剖析
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <h2>Query Cache背景</h2>
<p>Query Cache在其他数据库里面也称为结果集缓存。顾名思义，它的目的是将SELECT语句与其返回结果缓存到Query Cache中，如果重复执行相同的SELECT语句的话，我们可以跳过MySQL的解析、优化、执行阶段，将SELECT的查询结果直接返回到客户端，加速SELECT语句的执行。</p>

<h2>Query Cache中的主要数据结构</h2>

<table>
  <tbody>
    <tr>
      <td>Query_cache</td>
      <td>对整个Query Cache进行管理，负责提供接口供Server调用。</td>
    </tr>
    <tr>
      <td>Query_cache_block</td>
      <td>Query Cache中的所有存储都是以Query_cache_block来组织的。每一个Query_cache_block的格式都是Block_header + data.</td>
    </tr>
    <tr>
      <td>Query_cache_table</td>
      <td>用来记录单个数据表的Block_header。</td>
    </tr>
    <tr>
      <td>Query_cache_block_table</td>
      <td>用来存储与Query相关的数据表的Block_header。每一个数据表都有一个独立的Query_cache_block_table结构对应。与Query_cache_table的区别是，所有Query使用的同一个数据表对应同一个Query_cache_table。</td>
    </tr>
    <tr>
      <td>Query_cache_query</td>
      <td>用来记录Query的Block_header。</td>
    </tr>
    <tr>
      <td>Query_cache_result</td>
      <td>用来记录结果集的Block_header。</td>
    </tr>
    <tr>
      <td>Query_cache_memory_bin</td>
      <td>用来管理Query Cache的内存使用，Query Cache的整体内存被划分为多个bins。该结构在Query Cache初始化的过程中完成。请参考下面Query Cache内存初始化部分。</td>
    </tr>
    <tr>
      <td>Query_cache_memory_bin_step</td>
      <td>用来辅助初始化Query_cache_memory_bins，记录内存管理的每一层的bins内存分配的大小。请参考下面Query Cache内存初始化部分。</td>
    </tr>
    <tr>
      <td>Query_cache_query_flags</td>
      <td>用来记录影响Query返回结果的环境变量，比如sql_mode，字符集，time_zone等。</td>
    </tr>
  </tbody>
</table>

<h2>Query cache的存储结构</h2>
<p>Query cache中是利用Query_cache_block对象进行存储的，存储结构如下图：</p>

<pre><code>+----------------------------------------------------------------------------+
| Block header                                                               |
+----------------------------------------------------------------------------+
| Table of database table lists                                              |
+----------------------------------------------------------------------------+
| Type depended header                                                       |
+----------------------------------------------------------------------------+
| Data ...                                                                   |
+----------------------------------------------------------------------------+
</code></pre>

<p><strong>说明</strong>：</p>

<ul>
  <li>
    <p>Block header：指的就是Query_cache_block这个结构体自身需要存储的一些信息。详细信息可以参考sql/sql_cache.h中的结构体说明。</p>
  </li>
  <li>
    <p>Table of database table lists：这部分是用来记录与Query相关的所有数据表header信息(Query_cache_block_table结构）。对于一条Query来说，每个相关的数据表都有一个这样的header信息。而对于结果集数据块来说，这部分不包含数据。</p>
  </li>
  <li>
    <p>Type depended header ：这部分用来记录依赖于该Block的具体对象header，比如是Query_cache_query还是Query_cache_result。</p>
  </li>
  <li>
    <p>Data：顾名思义，就是记录我们当前存储对象的数据信息。</p>
  </li>
</ul>

<h2>Query cache的内存管理</h2>
<p>Query cache依靠自己对内存进行管理。当用户调整query_cache_size系统参数时，Query cache会自动的修改内存大小。</p>

<h3>Query cache内存的初始化</h3>
<p>Query cache的内存初始化包含两个部分：</p>

<ol>
  <li>
    <p>一次性申请query_cache_size大小的内存空间。</p>
  </li>
  <li>
    <p>初始化内存管理方式。</p>
  </li>
</ol>

<p>Query cache的内存管理方式如下图所示：</p>

<p><img src="http://img2.tbcdn.cn/L1/461/1/62d2df3ad88d480408fe615b0f953497fd9badb8" alt="内存管理模拟图" /></p>

<p><strong>说明</strong>：</p>

<p>Query cache对于整个内存的管理是将整个内存块划分多层大小不同的多个<code>query_cache_memory_bins</code>（简称bins）。具体的层数由<code>query_cache_memory_bin_steps</code> （简称steps）确定，steps是动态根据<code>query_mem_size</code>确定的，如何确定steps请参考<code>Query_cache::init_cache</code>。第N层的bins数量是由（前N-1层bins数量总和 + QUERY_CACHE_MEM_BIN_PARTS_INC） * QUERY_CACHE_MEM_BIN_PARTS_MUL 确定的。<code>QUERY_CACHE_MEM_BIN_PARTS_INC</code>和<code>QUERY_CACHE_MEM_BIN_PARTS_MUL</code>是定义的控制每一层bins增量的两个宏。</p>

<h3>Query cache内存的分配</h3>
<p>Query cache刚初始化后，整个内存作为一个大的free_block。当需要申请新的数据块时，Query cache首先寻找大小最为接近的bins进行匹配，判断bins中有没有free_block。如果有则使用；如果没有则从其上一个bins中寻找free_block(bins是按照空间大小降序排列的，上层的bins大小要比下层的bins空间大），直到找到合适大小的一个。 如果最后没有找到合适大小的，Query cache将启动淘汰机制进行淘汰，以满足空间申请的需求。</p>

<h3>Query cache内存的回收</h3>
<p>在需要申请内存块时，如果没有找到合适大小的free block, Query cache将启动淘汰机制来淘汰最旧的缓存记录，释放的block将被分配到对于大小的bins中。如果分配过程中发现当前回收的free block和bins中free block地址相邻， 当前回收的free block将会和相邻的free block进行合并，重新插入到大小合适的bins中。另外Query cache通过flush query cache语句可以自动整理Query cache的defragments。</p>

<h2>Query cache相关的几个重点系统变量</h2>

<h4>query_cache_type</h4>

<table>
  <tbody>
    <tr>
      <td>范围</td>
      <td>SESSION</td>
    </tr>
    <tr>
      <td>类型</td>
      <td>ENUM</td>
    </tr>
    <tr>
      <td>功能</td>
      <td>a)	ON: cache所有SELECT语句。<br /> b)	OFF: 关闭query cache。(默认)。<br /> c)	DEMAND: 使用SQL_CACHE hint的SELECT语句才可以缓存</td>
    </tr>
  </tbody>
</table>

<h4>query_cache_size</h4>

<table>
  <tbody>
    <tr>
      <td>范围</td>
      <td>GLOBAL</td>
    </tr>
    <tr>
      <td>类型</td>
      <td>ULong</td>
    </tr>
    <tr>
      <td>功能</td>
      <td>a) 设置Query cache的大小，设置范围是（0 ~ ULONG_MAX）。<br /> b) 默认值是1M。</td>
    </tr>
  </tbody>
</table>

<h4>query_cache_limit</h4>

<table>
  <tbody>
    <tr>
      <td>范围</td>
      <td>GLOBAL</td>
    </tr>
    <tr>
      <td>类型</td>
      <td>ULong</td>
    </tr>
    <tr>
      <td>功能</td>
      <td>a)	设置最大结果集大小范围，如果结果集超出了该值的大小，将不会被缓存。<br />设置范围是（0 ~ ULONG_MAX）。<br />b)	默认值是1M。</td>
    </tr>
  </tbody>
</table>

<h4>query_cache_min_res_unit</h4>

<table>
  <tbody>
    <tr>
      <td>范围</td>
      <td>GLOBAL</td>
    </tr>
    <tr>
      <td>类型</td>
      <td>ULong</td>
    </tr>
    <tr>
      <td>功能</td>
      <td>a) 设置内存申请的最小单元块的大小，如果设置太大会影响Query Cache的实际使用率，造成空间浪费。<br />如果设置太小会增加内存的分配以及合并成本。设置范围是（0 ~ ULONG_MAX）。<br />b)	默认值是4K。</td>
    </tr>
  </tbody>
</table>

<h3>Query cache相关的两个Hints</h3>

<h4>sql_no_cache</h4>

<p>功能: 当前sql语句忽略使用query cache.</p>

<h4>sql_cache</h4>

<p>功能: 当query_cache_type为ON或者DEMAND时，考虑缓存当前sql语句的结果集。</p>

<h2>Query cache的工作原理</h2>
<p>为了快速查找，Query cache中维护着一个HASH map，用来记录Query对应的其所在的query_cache_block。其对应的Key由query + database + flag（包含影响执行结果的所有环境变量）组成。如果当前Query与任何Key比较一致的话，对应的结果集就可以被直接返回。</p>

<h2>Query cache 的失效</h2>
<p>当一个表发生改变时，所有与该表相关的cached queries将失效。一个表发生变化，包含多种语句，比如 INSERT, UPDATE, DELETE, TRUNCATE TABLE,ALTER TABLE, DROP TABLE, 或者 DROP DATABASE。<br />
为了加速失效过程，Query cache中维护着一个HASH  map, 用来记录table对应的query_cache_block_table。其Key由db_name + table_name构成。通过Key的比较可以获取query_cache_block_table，该对象包含一个双向链表，记录了所有与该表相关的cached queries。通过这样的方式便可以快速的失效一个表对应的所有cached queries。</p>

<h2>Query cache 的监控</h2>

<ul>
  <li>Query cache 通过show status可以看到如下一系列的状态信息：</li>
</ul>

<table>
  <tbody>
    <tr>
      <td>Qcache_total_blocks</td>
      <td>Query cache总的块数。</td>
    </tr>
    <tr>
      <td>Qcache_free_blocks</td>
      <td>Query cache的free blocks数。</td>
    </tr>
    <tr>
      <td>Qcache_hits</td>
      <td>通过Query cache，命中的query次数。</td>
    </tr>
    <tr>
      <td>Qcache_inserts</td>
      <td>该变量记录了之前有多少条query及其数据集成功插入了Query Cache中，即便插入的记录后来被淘汰了，该值也不会受到影响。</td>
    </tr>
    <tr>
      <td>Qcache_lowmem_prunes</td>
      <td>Query cache中淘汰的query记录数。</td>
    </tr>
    <tr>
      <td>Qcache_not_cached</td>
      <td>未被缓存的query数。</td>
    </tr>
    <tr>
      <td>Qcache_queries_in_cache</td>
      <td>当前Query cache存在的query记录数，如果有记录被淘汰了，该值就会发生变化。注意与Qcache_inserts的不同。</td>
    </tr>
    <tr>
      <td>Qcache_total_blocks</td>
      <td>当前Query cache中总的blocks个数。</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>Optimizer_trace中会显示“query_result_read_from_cache：true”这样的信息。</li>
</ul>

<h2>总结</h2>

<p>如果当前用户频繁使用同样的query进行查询，Query cache对于性能的提升是显而易见的。但是也有不太理想的情况，Query cache由于不仅依赖于执行的query，同时也依赖于当时的执行环境，比如SQL_MODE信息，字符集等，因此对于多用户共享Query cache，很难做到完全的共享。</p>

<p>另外，对于失效方式，目前MySQL做的并不到位，只要是表或表中的数据发生了变化便会引发相关cached queries失效，而更理想的方式是只有影响当前cached queries的执行结果的表的变化才引发相关cached plan失效。比如如果UPDATE语句并未修改某个cached queries的执行记过，其实可以不用对其失效。</p>

<p>我们会在接下来的文章中继续剖析Query cache的并发处理过程，敬请期待。</p>


    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
