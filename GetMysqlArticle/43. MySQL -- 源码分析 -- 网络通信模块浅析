<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · 源码分析 · 网络通信模块浅析</title>
  <meta name="description" content="MySQL 网络通信浅析">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2016/07/04/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2016/07">
    <h1>数据库内核月报 － 2016 / 07</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
      <div class="left">
        <a href="/monthly/2016/07/03/">
          ‹
        </a>
      </div>
    
  
  
    
      <div class="right">
        <a href="/monthly/2016/07/05/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/01/" target="_blank">
                
                MySQL · 特性分析 ·MySQL 5.7新特性系列三
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/02/" target="_blank">
                
                MySQL · 特性分析 · 5.7 代价模型浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/03/" target="_blank">
                
                PgSQL · 实战经验 · 分组TOP性能提升44倍
              </a>
            </li>
          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2016/07/04/" target="_blank">
                
                MySQL · 源码分析 · 网络通信模块浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/05/" target="_blank">
                
                MongoDB · 特性分析 · 索引原理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/06/" target="_blank">
                
                SQLServer · 特性分析 · XML与JSON应用比较
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/07/" target="_blank">
                
                MySQL · 最佳实战 · 审计日志实用案例分析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/08/" target="_blank">
                
                MySQL · 性能优化 · 条件下推到物化表
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/09/" target="_blank">
                
                MySQL · 源码分析 · Query Cache内部剖析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/10/" target="_blank">
                
                MySQL · 捉虫动态 · 备库1206错误问题说明
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · 源码分析 · 网络通信模块浅析
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <p>MySQL 网络通信浅析</p>

<p>MySQL的网络通信协议主要包含以下几个层次，从最上层的MySQL数据包协议层到最底层的socket传输：</p>

<pre><code>| THD
| Protocol
| NET
| VIO
| SOCKET
</code></pre>

<p>本文主要扫一下相关的代码，以下分析基于MySQL5.7。</p>

<h2>创建会话</h2>

<p>在MySQL5.7中对会话协议层的代码进行了大量的重构以优化性能，并使得代码更加可读。以下这幅图大概展示了几个相关的类关系（未包含诸如windows平台的相关类）</p>

<p><img src="http://img1.tbcdn.cn/L1/461/1/2138c6147d32f077b86415d5d1863fa5fa001768" alt="mysql-connect" /></p>

<p>创建用户线程堆栈是从主线程开始的，监听客户端请求并创建处理线程</p>

<pre><code>mysqld_main
|--&gt;connection_event_loop
	|--&gt;listen_for_connection_event 
	//根据不同的监听模式，去监听新请求, 当获取到一个新的监听请求时，会创建一个Channel_info类，用	来存储用户的socket信息
	|--&gt;Connection_handler_manager::process_new_connection
		|--&gt;Per_thread_connection_handler::add_connection
		//我们通常用的one thread one connection对应的类为Per_thread_connection_handler
			|--&gt;创建用户线程，线程函数为handle_connection
</code></pre>

<p>在MySQL5.7里一个重大的优化，如上所述，就是关于用户会话的thd, net, vio等信息的初始化都不是在主线程进行的，而是创建用户线程后，由用户线程自己来完成。通过这种方式，主线程可以更高效的接受新的连接请求，从而优化了在短连接场景下的性能。见<a href="http://mysqlserverteam.com/improving-connectdisconnect-performance/">官方博客</a> 及相应的<a href="http://dev.mysql.com/worklog/task/?id=6606">worklog</a></p>

<p>下面这幅图摘自官方博客，大家感受下5.7相比之前版本的短连接性能优化：</p>

<p><img src="http://img1.tbcdn.cn/L1/461/1/8013bda3f58f2d1a25b1e1e7a2e983cf0b39ada9" alt="perf-short-connection" /></p>

<p>创建用户会话的主要函数栈包括：</p>

<pre><code>handle_connection  //线程入口函数
|--&gt;init_new_thd
	|--&gt;Channel_info_local_socket::create_thd
		|--&gt;Channel_info::create_thd
			|--&gt;create_and_init_vio
			|--&gt;Protocol_classic::init_net
				|--&gt;my_net_init
					|--&gt;vio_fastsend //设置socket选项
					* 设置IP_TOS为IPTOS_THROUGHPUT
					* 设置TCP_NODELAY
					
|--&gt;Global_THD_manager::add_thd
// 加入到thd链表上

|--&gt;thd_prepare_connection	
	|--&gt;login_connection
		|--&gt; check_connection
			//检查链接，设置thd的链接信息，
			|--&gt; vio_keepalive // 设置SO_KEEPALIVE选项
			|--&gt; acl_authenticate // 权限认证
			
	|--&gt;prepare_new_connection_state
		//如果连接打开了CLIENT_COMPRESS，设置NET::compress为true。
		//如果设置了init_connect，则在这里执行对应的SQL语句

/* 循环接受请求并处理(do_command) */
	|--&gt;Protocol_classic::get_command
		|--&gt;Protocol_classic::read_packet
			|--&gt;my_net_read	// 读取command包，这里的读超时时间由wait_timeout决定

|--&gt;close_connection
	|--&gt;THD::disconnect
		|--&gt;THD::shutdown_active_vio
			|--&gt;vio_shutdown	/* 关闭socket */
</code></pre>

<h2>NET/VIO</h2>

<p><strong>my_net_write</strong></p>

<p>该函数用于将数据拷贝到NET缓冲区，当长度大于<code>MAX_PACKET_LENGTH</code>(即4MB-1字节)会对Packet进行拆分成多个packet。每个Packet的头部都会留4个字节，其中：1~3字节，存储该packet的长度，第4个字节存储当前的packet的序号，每存储一次后递增<code>net-&gt;pkt_nr</code>。</p>

<p>每个Net对象有一个Buff(<code>net-&gt;buff</code>)，即将发送的数据被拷贝到这个buffer中，当Buffer满时需要立刻发出到客户端。如果Buffer足够大，则只做memcpy操作。<code>net-&gt;write_pos</code>被更新到写入结束的位置偏移量 (<code>net_write_buff</code>)</p>

<p>如果一次写入的数据被拆分成多个Packet，那么net-&gt;pkt_nr也对应的递增多次. pkt_nr的作用是在客户端解析时，防止包发送乱序。</p>

<p><strong>net_flush</strong></p>

<p>实际上在<code>my_net_write</code>函数中，如果<code>net-&gt;buff</code>不够用，已经会做网络写了，<code>net_flush</code>最终保证所有在buff中的数据被写到网络</p>

<p>当客户端启用压缩协议时，这里会有些不同的，会给packet头部再加3个字节(<code>COMP_HEADER_SIZE</code>)，被压缩的数据不包含头部的7个字节：</p>

<pre><code>[3bytes:Packet的长度]
[1bytes: pkt_nr]
[3bytes:压缩后的长度]
[1bytes: compress_pkt_nr]
</code></pre>

<p>同样的，每个压缩包都会递增<code>net-&gt;compress_pkt_nr</code></p>

<p><strong>net_write_raw_loop</strong></p>

<p>当packet准备好发送后，调用函数<code>net_write_raw_loop</code>开始进行数据发送</p>

<ul>
  <li>发送模式受<code>vio-&gt;write_timeout</code>影响(通过参数<code>net_write_timeout</code>控制)；当该参数被设置成大于等于0时，使用非阻塞模式send数据包(<code>MSG_DONTWAIT</code>)</li>
  <li>若网络发送被中断（EINTR），会去尝试重传</li>
  <li>使用非阻塞模式send，每次并不保证数据全部发送完毕，因此需要循环的调用直到所有的数据都发送完毕</li>
  <li>当输出缓冲区满时，获得错误码EWOULDBLOCK/EAGAIN,则阻塞等待(<code>vio_socket_io_wait</code>)，最大等待时间为<code>net_write_timeout</code>，超时则返回错误</li>
</ul>

<p><strong>my_net_read</strong></p>

<p>根据NET接口先读取数据包(<code>net_read_packet</code>)：</p>

<ul>
  <li>先读取packet header，一个普通的packet header包含4个字节，压缩协议下则另外再加3个字节，如上述(<code>net_read_packet_header</code>)。其中的pkt_nr会提取出来和本地的值相比较。在读写两段维持的pkt_nr自增值保证了服务器和客户端的通信以一种有序的方式进行，并用于校验包的有序性。如果不一致，则说明网络包发生了乱序。直接报错。如果一致，本地net-&gt;pkt_nr++</li>
  <li>从packet header中提取剩下的packet长度，继续从socket读取</li>
</ul>

<p><strong>Vio</strong></p>

<p>Vio在NET的更下一层，封装了所有对socket的操作。根据不同的连接类型（TCP/IP, Socket, Name Pipe, SSL, SHARED MEMORY），相关函数指针在vio_init函数中定义，这里不展开描述</p>

<p><strong>相关参数</strong></p>

<ul>
  <li>connect_timeout: 在连接认证阶段的网络交互超时时间(ref <code>login_connection</code>);</li>
  <li>wait_timeout: 等待来自客户端的新的command请求;</li>
  <li>net_read_timeout: 一般情况下的SQL通常直接从command发过来，但拿到command后，在一条语句内可能还需要和客户端交互，这里会用到该timeout值，例如<code>load data local infile</code>语句;</li>
  <li>net_write_timeout: 就是通过网络发送数据的最大超时时间;</li>
  <li>interactive_timeout: 当客户端打开选项CLIENT_INTERACTIVE时，将当前会话的NET的wait_timeout设置为该值;</li>
</ul>

<h2>结果集</h2>

<p>MySQL有两种常用的数据协议，一种是用于Prepared Statement，对应类为<code>Protocol_binary</code>，另外一种是普通的协议，对应类为<code>Protocol_classic</code></p>

<p>我们以一个简单的表为例:</p>

<pre><code>mysql&gt; create table t1 (a int, b int);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; insert into t1 values (1,1),(2,2);
Query OK, 2 rows affected (0.00 sec)
</code></pre>

<p>当执行最后一条select操作时，这里使用的类为Protocol_classic</p>

<p><strong>发送metadata</strong></p>

<ul>
  <li>ref: <code>Protocol_classic::start_result_metadata</code></li>
</ul>

<p>将列的个数写入Net缓冲区</p>

<ul>
  <li>ref: <code>Protocol_classic::send_field_metadata</code></li>
</ul>

<p>逐列的准备元数据信息，包含：</p>

<pre><code>| 3bytes 标识符：def 
| db_name 
| table_name 
| org_table_name 
| col_name 
| org_col_name 
| 字符集编码 
| 列长度 
| 列类型 
| flags 
| decimals(这里为0) 
| 预留
| 预留
</code></pre>

<p>可以看到每个列的元数据都包含了非常多的信息，使用字符串存储，这也意味着对于一条简单的SQL，你的网络传输的内容可能大多数都是元数据，即时你的客户端可能并不需要引用到。</p>

<p>有多个列就写多个packet到Net buffer (Protocol_classic::end_row)</p>

<ul>
  <li>ref: <code>Protocol_classic::end_result_metadata</code></li>
</ul>

<p>write_eof_packet函数会被调用，用于标识元数据信息到此结束。此处共写5个字节（不含packet header）</p>

<p><strong>发送数据</strong></p>

<p>ref:  <code>end_send --&gt; Protocol_classic::end_row</code></p>

<p>如上例，发送两行数据的packet包括</p>

<table>
  <tbody>
    <tr>
      <td>1</td>
      <td>‘1’</td>
      <td>1</td>
      <td>‘1’</td>
    </tr>
    <tr>
      <td>1</td>
      <td>‘2’</td>
      <td>1</td>
      <td>‘2’</td>
    </tr>
  </tbody>
</table>

<p><strong>结束发送</strong></p>

<p>ref: <code>THD::send_statement_status --&gt;net_send_eof --&gt; write_eof_packet</code></p>

<p>发送结果结束标记，其中包含了sql执行过程中产生的warning个数</p>

<p><strong>元数据开销</strong></p>

<p>从上述可以看到，结果集中有很大一部分的开销是给元数据的，这意味着类似普通的pk查询，元数据的开销可能会非常昂贵。</p>

<p>以下贴下我之前测试过的一个例子，增加了几个选项来控制发送的元数据量：</p>

<pre><code>0/METADATA_FULL: return all metadata, default value.
1/METADATA_REAL_COLUMN: only column name;
2/METADATA_FAKE_COLUMN: fake column name ,use 1,2...N instead of real column name
3/METADATA_NULL_COLUMN: use NULL to express the metadata information
4/METADATA_IGNORE: ignore metadata information, just for test..
</code></pre>

<p>测试表：</p>

<pre><code>CREATE TABLE `test_meta_impact` (
`abcdefg1` int(11) NOT NULL AUTO_INCREMENT,
`abcdefg2` int(11) DEFAULT NULL,
`abcdefg3` int(11) DEFAULT NULL,
`abcdefg4` int(11) DEFAULT NULL,
……
……
`abcdefg40` int(11) DEFAULT NULL,
PRIMARY KEY (`abcdefg1`)
) ENGINE=InnoDB AUTO_INCREMENT=229361 DEFAULT CHARSET=utf8
</code></pre>

<p>使用mysqlslap测试并发pk查询</p>

<pre><code>mysqlslap --no-defaults -uxx --create-schema=test -h$host -P $port --number-of-queries=1000000000 --concurrency=100 --query='SELECT * FROM test.test_meta_impact where abcdefg1 = 2'
</code></pre>

<p>测试结果</p>

<pre><code>METADATA_FULL : 3.48w TPS, Net send 113M
METADATA_REAL_COLUMN: 7.2W TPS, Net send 111M
METADATA_FAKE_COLUMN: 9.2W TPS , Net send 116M
METADATA_NULL_COLUMN: 9.6w TPS , Net send 115M
METADATA_IGNORE: 13.8w TPS, Net send 30M
</code></pre>

<p>很显然无论网络流量还是TPS吞吐量，在这个人为构造的极端场景下，元数据的开销都非常的显著。</p>


    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
