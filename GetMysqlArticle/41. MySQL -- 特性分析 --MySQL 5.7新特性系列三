<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>MySQL · 特性分析 ·MySQL 5.7新特性系列三</title>
  <meta name="description" content="继上两期月报，MySQL5.7新特性之一介绍了一些新特性及兼容性问题，MySQL 5.7新特性之二介绍了临时表的优化和实现。  这期我们一起来学习下undo空间管理，重点介绍truncate功能。">

  <link rel="stylesheet" href="/monthly/css/typo.css">
  <link rel="stylesheet" href="/monthly/css/animate.css">
  <link rel="stylesheet" href="/monthly/css/main.css">
  <link rel="canonical" href="http://mysql.taobao.org//monthly/2016/07/01/">
  <link rel="alternate" type="application/rss+xml" title="数据库内核月报" href="http://mysql.taobao.org//monthly/feed.xml" />

  <link rel="stylesheet" href="//cdn.staticfile.org/highlight.js/8.3/styles/tomorrow.min.css">
  <script src="/monthly/js/highlight.min.js"></script>
  <!-- <link rel="stylesheet" href="/monthly/themes/tomorrow.css">
  <script src="/monthly/highlight/highlight.pack.js"> -->
  <script>hljs.initHighlightingOnLoad();</script>

  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://cdn.staticfile.org/jquery/1.11.1/jquery.min.map"></script>

  <script src="/monthly/scripts/changeTarget.js"></script>
  
</head>


<!-- Google Analysis -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62056244-1', 'auto');
  ga('send', 'pageview');
</script>


  <body>

    <header>

  <a id="go-back-home" href="/monthly/2016/07">
    <h1>数据库内核月报 － 2016 / 07</h1>
  </a>

</header>


        <section class="paging">
  
  
  

  
    
  
  
    
      <div class="right">
        <a href="/monthly/2016/07/02/">
          ›
        </a>
      </div>
    
  
</section>


<div id = "container" class = "animated zoomIn">
  <div class="block">
  <nav id="primary_nav_wrap">
<ul>
  <li><a href="#">当期文章</a>
    <ul  class = "animated">
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
            
              <li class="current-menu-item">
            
              <a href="/monthly/2016/07/01/" target="_blank">
                
                MySQL · 特性分析 ·MySQL 5.7新特性系列三
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/02/" target="_blank">
                
                MySQL · 特性分析 · 5.7 代价模型浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/03/" target="_blank">
                
                PgSQL · 实战经验 · 分组TOP性能提升44倍
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/04/" target="_blank">
                
                MySQL · 源码分析 · 网络通信模块浅析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/05/" target="_blank">
                
                MongoDB · 特性分析 · 索引原理
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/06/" target="_blank">
                
                SQLServer · 特性分析 · XML与JSON应用比较
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/07/" target="_blank">
                
                MySQL · 最佳实战 · 审计日志实用案例分析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/08/" target="_blank">
                
                MySQL · 性能优化 · 条件下推到物化表
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/09/" target="_blank">
                
                MySQL · 源码分析 · Query Cache内部剖析
              </a>
            </li>
          
      
          
          

          
            
              <li>
            
              <a href="/monthly/2016/07/10/" target="_blank">
                
                MySQL · 捉虫动态 · 备库1206错误问题说明
              </a>
            </li>
          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
          
          

          
      
    </ul>
  </li>
</ul>
</nav>

    <div class="title">
      <h2>
        
        MySQL · 特性分析 ·MySQL 5.7新特性系列三
      </h2>
    </div>
  </div>
  <div class="content typo">
    <section class="post">
      <p>继上两期月报，MySQL5.7新特性之一介绍了一些新特性及兼容性问题，MySQL 5.7新特性之二介绍了临时表的优化和实现。  <br />
这期我们一起来学习下undo空间管理，重点介绍truncate功能。</p>

<h3>1. 背景</h3>
<p>InnoDB存储引擎中，undo在完成事务回滚和MVCC之后，就可以purge掉了，但undo在事务执行过程中，进行的空间分配如何回收，就变成了一个问题。 我们亲历用户的小实例，因为一个大事务，导致ibdata file到800G大小。</p>

<p>我们先大致看下InnoDB的undo在不同的版本上的一些演进:</p>

<p><strong>MySQL 5.5的版本上</strong>  <br />
InnoDB undo是放在系统表空间即ibdata file文件中，这样如果有比较大的事务(即需要生成大量undo的)，会撑大ibdata数据文件，<br />
虽然空间可以重用， 但文件大小不能更改。  <br />
关于回滚段的，只有这个主要的参数，用来设置多少个rollback segment。</p>

<pre><code>mysql&gt; show global variables like '%rollback_segment%';
+----------------------------+-------+
| Variable_name              | Value |
+----------------------------+-------+
| innodb_rollback_segments   | 128   |
+----------------------------+-------+
</code></pre>
<p><strong>MySQL 5.6的版本上</strong>  <br />
InnoDB undo支持独立表空间， 增加如下参数：</p>

<pre><code>+-------------------------+-------+
| Variable_name           | Value |
+-------------------------+-------+
| innodb_undo_directory   | .     |
| innodb_undo_logs        | 128   |
| innodb_undo_tablespaces | 1     |
+-------------------------+-------+
</code></pre>
<p>这样，在install的时候，就会在data目录下增加undo数据文件，来组成undo独立表空间，但文件变大之后的空间回收还是成为问题。</p>

<p><strong>MySQL 5.7的版本上</strong>  <br />
InnoDB undo在支持独立表空间的基础上，支持表空间的truncate功能，增加了如下参数：</p>

<pre><code>mysql&gt; show global variables like '%undo%';                                                                                 +--------------------------+------------+
| Variable_name            | Value      |
+--------------------------+------------+
| innodb_max_undo_log_size | 1073741824 |
| innodb_undo_directory    | ./         |
| innodb_undo_log_truncate | OFF        |
| innodb_undo_logs         | 128        |
| innodb_undo_tablespaces  | 3          |
+--------------------------+------------+
mysql&gt; show global variables like '%truncate%';
+--------------------------------------+-------+
| Variable_name                        | Value |
+--------------------------------------+-------+
| innodb_purge_rseg_truncate_frequency | 128   |
| innodb_undo_log_truncate             | OFF   |
+--------------------------------------+-------+
</code></pre>

<p>InnoDB的purge线程，会根据innodb_undo_log_truncate开关的设置，和innodb_max_undo_log_size设置的文件大小阈值，以及truncate的频率来进行空间回收和rollback segment的重新初始化。</p>

<p>接下来我们详细看下5.7的InnoDB undo的管理：</p>

<h3>2. undo表空间创建</h3>
<p>设置innodb_undo_tablespaces的个数， 在mysql install的时候，创建指定数量的表空间。  <br />
InnoDB支持128个undo logs，这里特别说明下，从5.7开始，innodb_rollback_segments的名字改成了innodb_undo_logs，但表示的都是回滚段的个数。  <br />
从5.7.2开始，其中32个undo logs为临时表的事务分配的，因为这部分undo不记录redo，不需要recovery，另外从33-128一共96个是redo-enabled undo。</p>

<p><strong>rollback segment的分配如下：</strong></p>

<pre><code>Slot-0: reserved for system-tablespace.
Slot-1....Slot-N: reserved for temp-tablespace.
Slot-N+1....Slot-127: reserved for system/undo-tablespace. */
</code></pre>

<p>其中如果是临时表的事务，需要分配两个undo logs，其中一个是non-redo undo logs；这部分用于临时表数据的回滚。<br />
另外一个是redo-enabled undo log，是为临时表的元数据准备的，需要recovery。</p>

<p>而且， 其中32个rollback segment创建在临时表空间中，并且临时表空间中的回滚段在每次server start的时候，需要重建。</p>

<p>每一个rollback segment可以分配1024个slot，也就是可以支持96*1024个并发的事务同时， 但如果是临时表的事务，需要占用两个slot。</p>

<p><strong>InnoDB undo的空间管理简图如下：</strong></p>

<p><img src="http://img1.tbcdn.cn/L1/461/1/a6e9323d7de7653c4aad4e4dfef66cc58d597020" alt="undo空间管理" /></p>

<p><strong>注核心结构说明：</strong></p>

<p><strong>1. rseg slot</strong>  <br />
rseg slot一共128个，保存在ibdata系统表空间中，其位置在：</p>

<pre><code>      /*!&lt; the start of the array of rollback segment specification slots */
      #define	TRX_SYS_RSEGS		(8 + FSEG_HEADER_SIZE) 
</code></pre>
<p>每一个slot保存着rollback segment header的位置。包括space_id + page_no，占用8个bytes。其宏定义：</p>

<pre><code>/* Rollback segment specification slot offsets */
/*-------------------------------------------------------------*/
#define	TRX_SYS_RSEG_SPACE	0	/* space where the segment
					header is placed; starting with
					MySQL/InnoDB 5.1.7, this is
					UNIV_UNDEFINED if the slot is unused */
#define	TRX_SYS_RSEG_PAGE_NO	4	/*  page number where the segment
					header is placed; this is FIL_NULL
					if the slot is unused */

/* Size of a rollback segment specification slot */
#define TRX_SYS_RSEG_SLOT_SIZE	8
</code></pre>

<p><strong>2. rseg header</strong>  <br />
 rseg header在undo表空间中，每一个rseg包括1024个undo segment slot，每一个slot保存着undo segment header的位置，包括page_no，暂用4个bytes，因为undo segment不会跨表空间，所以space_id就没有必要了。  <br />
其宏定义如下：</p>

<pre><code>/* Undo log segment slot in a rollback segment header */
/*-------------------------------------------------------------*/
#define	TRX_RSEG_SLOT_PAGE_NO	0	/* Page number of the header page of
					an undo log segment */
/*-------------------------------------------------------------*/
/* Slot size */
#define TRX_RSEG_SLOT_SIZE	4
</code></pre>

<p><strong>3. undo segment header</strong>  <br />
 undo segment header page即段内的第一个undo page，其中包括四个比较重要的结构：</p>

<table>
  <tbody>
    <tr>
      <td>undo segment header</td>
      <td>进行段内空间的管理</td>
    </tr>
    <tr>
      <td>undo page header</td>
      <td>page内空间的管理，page的类型：FIL_PAGE_UNDO_LOG</td>
    </tr>
    <tr>
      <td>undo header</td>
      <td>包含undo record的链表，以便安装事务的反顺序，进行回滚</td>
    </tr>
    <tr>
      <td>undo record</td>
      <td>剩下的就是undo记录了。</td>
    </tr>
  </tbody>
</table>

<h3>3. undo段的分配</h3>
<p>undo段的分配比较简单，其过程如下：</p>

<p><strong>首先是rollback segment的分配：</strong></p>

<pre><code>trx-&gt;rsegs.m_redo.rseg = trx_assign_rseg_low(
  srv_undo_logs, srv_undo_tablespaces,
  TRX_RSEG_TYPE_REDO);
</code></pre>
<ol>
  <li>使用round-robin的方式来分配rollback segment</li>
  <li>如果有单独设置undo表空间，就不使用system表空间中的undo segment</li>
  <li>如果设置的是truncate的就不分配</li>
  <li>一旦分配了，就设置trx_ref_count，不允许truncate。</li>
</ol>

<p>具体代码参考：</p>

<pre><code>/******************************************************************//**
Get next redo rollback segment. (Segment are assigned in round-robin fashion).
@return assigned rollback segment instance */
static
trx_rseg_t*
get_next_redo_rseg(
/*===============*/
	ulong	max_undo_logs,	/*!&lt; in: maximum number of UNDO logs to use */
	ulint	n_tablespaces)	/*!&lt; in: number of rollback tablespaces */
</code></pre>

<p><strong>其次是undo segment的创建：</strong></p>

<p>从rollback segment里边选择一个free的slot，如果没有，就会报错，通常是并发的事务太多。  <br />
错误日志如下：</p>

<pre><code>ib::warn() &lt;&lt; "Cannot find a free slot for an undo log. Do"
	" you have too many active transactions running"
	" concurrently?";
</code></pre>
<p>如果有free，就创建一个undo的segment。</p>

<p>核心的代码如下：</p>

<pre><code>/***************************************************************//**
Creates a new undo log segment in file.
@return DB_SUCCESS if page creation OK possible error codes are:
DB_TOO_MANY_CONCURRENT_TRXS DB_OUT_OF_FILE_SPACE */
static 
dberr_t
trx_undo_seg_create(
/*================*/
	trx_rseg_t*	rseg __attribute__((unused)),/*!&lt; in: rollback segment */
	trx_rsegf_t*	rseg_hdr,/*!&lt; in: rollback segment header, page
				x-latched */
	ulint		type,	/*!&lt; in: type of the segment: TRX_UNDO_INSERT or
				TRX_UNDO_UPDATE */
	ulint*		id,	/*!&lt; out: slot index within rseg header */
	page_t**	undo_page,
				/*!&lt; out: segment header page x-latched, NULL
				if there was an error */
	mtr_t*		mtr)	/*!&lt; in: mtr */

	/*	fputs(type == TRX_UNDO_INSERT
	? "Creating insert undo log segment\n"
	: "Creating update undo log segment\n", stderr); */
	slot_no = trx_rsegf_undo_find_free(rseg_hdr, mtr);

	if (slot_no == ULINT_UNDEFINED) {
		ib::warn() &lt;&lt; "Cannot find a free slot for an undo log. Do"
			" you have too many active transactions running"
			" concurrently?";

		return(DB_TOO_MANY_CONCURRENT_TRXS);
	}
</code></pre>

<h3>4. undo的truncate</h3>
<p>undo的truncate主要由下面两个参数控制：innodb_purge_rseg_truncate_frequency，innodb_undo_log_truncate。  <br />
  1. innodb_undo_log_truncate是开关参数。  <br />
  2. innodb_purge_rseg_truncate_frequency默认128，表示purge undo轮询128次后，进行一次undo的truncate。</p>

<p>当设置innodb_undo_log_truncate=ON的时候， undo表空间的文件大小，如果超过了innodb_max_undo_log_size， 就会被truncate到初始大小，但有一个前提，就是表空间中的undo不再被使用。</p>

<p>其主要步骤如下：<br />
1. 超过大小了之后，会被mark truncation，一次会选择一个<br />
2. 选择的undo不能再分配新给新的事务<br />
3. purge线程清理不再需要的rollback segment<br />
4. 等所有的回滚段都释放了后，truncate操作，使其成为install db时的初始状态。</p>

<p>默认情况下， 是purge触发128次之后，进行一次rollback segment的free操作，然后如果全部free就进行一个truncate。</p>

<p>但mark的操作需要几个依赖条件需要满足：<br />
1. 系统至少得有两个undo表空间，防止一个offline后，至少另外一个还能工作<br />
2. 除了ibdata里的segment，还至少有两个segment可用<br />
3. undo表空间的大小确实超过了设置的阈值</p>

<p>其核心代码参考：</p>

<pre><code>/** Iterate over all the UNDO tablespaces and check if any of the UNDO
tablespace qualifies for TRUNCATE (size &gt; threshold).
@param[in,out]	undo_trunc	undo truncate tracker */
static
void
trx_purge_mark_undo_for_truncate(
	undo::Truncate*	undo_trunc)
</code></pre>
<p>因为，只要你设置了truncate = on，MySQL就尽可能的帮你去truncate所有的undo表空间，所以它会循环的把undo表空间加入到mark列表中。</p>

<p>最后，循环所有的undo段，如果所属的表空间是marked truncate，就把这个rseg标志位不可分配，加入到trunc队列中，在purge的时候，进行free rollback segment。</p>

<p><strong>注意：</strong>  <br />
如果是在线库，要注意影响，因为当一个undo tablespace在进行truncate的时候，不再承担undo的分配。只能由剩下的undo 表空间的rollback segment接受事务undo空间请求。</p>

<p>MySQL 5.7 新特性系列，下次进行group replication的分享，敬请期待。</p>


    </section>
  </div>
</div>


    <footer>
  <a href="http://mysql.taobao.org/" target="_blank" class="muted">阿里云RDS-数据库内核组</a>
  <br>
  <a href="https://github.com/alibaba/AliSQL" target="_blank" class="muted">欢迎在github上star AliSQL</a>
</br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">知识共享署名-非商业性使用-相同方式共享 3.0 未本地化版本许可协议</a>进行许可。
</footer>

<script type="text/javascript">
  jQuery(document).ready(function($){
    // browser window scroll (in pixels) after which the "back to top" link is shown
    var offset = 300,
      //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
      offset_opacity = 1200,
      //duration of the top scrolling animation (in ms)
      scroll_top_duration = 700,
      //grab the "back to top" link
      $back_to_top = $('.cd-top');

    //hide or show the "back to top" link
    $(window).scroll(function(){
      ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
      if( $(this).scrollTop() > offset_opacity ) {
        $back_to_top.addClass('cd-fade-out');
      }
    });

    //smooth scroll to top
    $back_to_top.on('click', function(event){
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0 ,
        }, scroll_top_duration
      );
    });

  });
</script>



    <a href="#0" class="cd-top"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="10px"
   width="38px" height="60px" viewBox="0 0 16 16" enable-background="new 0 0 16 16" xml:space="preserve">
      <polygon fill="#FFFFFF" points="8,2.8 16,10.7 13.6,13.1 8.1,7.6 2.5,13.2 0,10.7 "/>
    </svg>
    </a>
  </body>

</html>
